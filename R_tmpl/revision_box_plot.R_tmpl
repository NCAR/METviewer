setwd("#<r_work>#");

source("include/util_plot.R");
source("include/boxplot_ci.R");



strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";

#
#  Plot Control Variables
#
boolEqualizeByIndep = #<equalize_by_indep>#;
boolEventEqual  = #<event_equal>#;
boolShowNStats  = #<show_nstats>#;
boolIndy1Stagger= #<indy1_stagger>#;
boolGridOn    = #<grid_on>#;
boolDumpPoints1  = #<dump_points1>#;
boolBoxAvg		= #<box_avg>#;
boolBoxPts		= #<box_pts>#;

listY1limUsr  = #<y1_lim>#;

listPlotDisp  = #<plot_disp>#;

listPlotOrderSeries  = #<order_series>#;

strIndyVar    = "#<indy_var>#";

listIndy = #<indy_list>#;

listIndyPlotVal = #<indy_plot_val>#;

listDep1Plot = #<dep1_plot>#;

listAggVal = #<agg_list>#;

listSeries1Val = #<series1_list>#;

listFixedValEx = #<fix_val_list_eq>#;

listDep1Scale = #<dep1_scale>#;

listLegendUsr = #<legend>#;

listColors = #<colors>#;
listPch = #<pch>#;
listType = #<type>#;
listLty = #<lty>#;
listLwd = #<lwd>#;
listConSeries = #<con_series>#;

revisionAc = #<revision_ac>#;
revisionRun = #<revision_run>#;

listSeriesNobs = #<series_nobs>#;

listSeries1Var = names(listSeries1Val);

box_outline = #<box_outline>#;

#
#  Build the series data for the plot
#

#if fcst_var is a special char - read it as-is and do not convert
sampleData = read.delim(strDataFile,nrows=5);
classes <- sapply(sampleData, class);
numeric_columns <- c('stat_value', 'stat_bcl', 'stat_bcu', 'stat_ncu', 'stat_ncl','fbs', 'fss');
integer_columns <- c('fcst_lead','nstats');
character_columns <- c('fcst_var', 'model', 'stat_name')
for(col in 1:ncol(sampleData)){
  if ( is.element( names(classes)[col] , numeric_columns) ){
    classes[col]='numeric';
  } else if ( is.element( names(classes)[col] , integer_columns) ){
    classes[col]='integer';
  } else if ( is.element( names(classes)[col] , character_columns) ){
    classes[col]='character';
  }
}

dfPlot = read.delim(strDataFile,colClasses = classes);
if(nrow(dfPlot) > 0){

# run event equalizer, if requested
if( FALSE != boolEventEqual  ){

    library(reticulate)

    #use_python("#<python>#", required = TRUE)
    use_virtualenv('#<virtualenv>#')
    source_python('#<ee_python>#')


    sys = import('sys')
    dfPlot1 = data.frame();
    #list all fixed variables
    listFixVars=c();
    listFixVarVals = c();
    if(length(listFixedValEx) > 0){
      for(index in 1:length(listFixedValEx)){
        if(is.null(listFixVars)){
          listFixVars = names(listFixedValEx[index]);
          listFixVarVals = permute(listFixedValEx[index]);
        }else{
          listFixVars =  append(listFixVars, names(listFixedValEx[index]));
          listFixVarVals = append(listFixVarVals, permute(listFixedValEx[index]));
        }
      }
    }


    for( strDep1Name in names(listDep1Plot) ){
      for( strDep1Stat in listDep1Plot[[strDep1Name]] ){
        fPlot = dfPlot;
        for(strSeriesVal in names(listSeries1Val)){
          vectValPerms = c();
          for(index in 1:length(listSeries1Val[[strSeriesVal]])){
            vectValPerms= append(vectValPerms, strsplit(listSeries1Val[[strSeriesVal]][index], ",")[[1]]);
          }
          fPlot = fPlot[fPlot$fcst_var == strDep1Name & fPlot[[strSeriesVal]] %in% vectValPerms & fPlot$stat_name %in% strDep1Stat,  ];
        }
        #fPlot = eventEqualize(fPlot, strIndyVar, listIndy, listSeries1Val, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
        fPlot = event_equalize(fPlot, strIndyVar, listIndy, listSeries1Val, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
        sys$stdout$flush()
        dfPlot1 = rbind(dfPlot1, fPlot);
      }

    }

    strAfrerEqualizeFile = sub("\\.data$", ".dataAfterEq", strDataFile, perl=TRUE);
    write.table(dfPlot, file=strAfrerEqualizeFile, quote=FALSE, row.names=FALSE, col.names=TRUE, sep = "\t");

  }



  listColorsOrdered=c();
  listPlotDispOrdered=c();
  for(index in 1:length(listPlotOrderSeries)){
    listColorsOrdered[ listPlotOrderSeries[index] ]=listColors[index];
    listPlotDispOrdered[ listPlotOrderSeries[index] ]=listPlotDisp[index];
  }

  #order legends
  if( 0 < length(listLegendUsr) ){
    listLegendUsrOrdered=c();
    for(index in 1:length(listPlotOrderSeries)){
      listLegendUsrOrdered[ listPlotOrderSeries[index] ]=listLegendUsr[index];
    }
  }



  # build the series value permutations
  matPermVal1 = permute(listSeries1Val);

  # build the y1 plot series using information in the plot dataframe
  intNumSeries1 = numSeries(listSeries1Val, listDep1Plot);
  intNumSeries1Dep = nrow( matPermVal1);

  x_axis_lables=c()
  #create x-axis lables
  for (name in names(listSeries1Val)){
    values = listSeries1Val[[name]]
      x_axis_lables <- c(x_axis_lables, values)
  }


  # build the display lists for y1 and y2
  indexesNumSeries1 = 1:intNumSeries1;
  listPlotDispSeries1 = listPlotDisp[indexesNumSeries1];
  listPchSeries1 = listPch[indexesNumSeries1];
  listColorsSeries1 = listColors[indexesNumSeries1];
  listPlotOrderSeries1Orig = listPlotOrderSeries[indexesNumSeries1];





  # calculate the horizonal location increment
  dblIndySpan = .75 * ( sum(listPlotDisp) ) * #<box_boxwex>#;
  dblInc = 0;
  if( 1 < ( sum(listPlotDisp) ) ){
    dblInc = dblIndySpan / (( sum(listPlotDisp) ) - 1);
  } else {
    dblIndySpan = 0;
  }
  listX = 1:length(x_axis_lables);
  listXMinMax = c(min(listX)-1, max(listX)+1);

  # if the plot contains points, establish the plot window and y axis
  listY1lim = c();

  listNStats=rep(0, length(listIndy))

  # build a box series Y1 for each plot series permutation
  listBoxes1 = list();
  listMeans1 = list();
  listAllStats1=list();

  ll=list();


  # build the y1 plot series using information in the plot dataframe
  listSeries1 = list();
  listLegend = c();
  listLegendNotOrdered = c();
  listAllStats=list();
  intLegendIndex=1;
  for( strDep1Name in names(listDep1Plot) ){
    for( strDep1Stat in listDep1Plot[[strDep1Name]] ){

      # gather the stats that pertain to the current fcst_var and stat
      dfPlotStat = dfPlot[dfPlot$fcst_var == strDep1Name & dfPlot$stat_name == strDep1Stat,];
      dfPlotStat = scaleStats(dfPlotStat, listDep1Scale, paste(strDep1Name, "_", strDep1Stat, sep=""));

      # build the y1 plot series using information in the plot dataframe
      listAllStats1 = buildAllStats(dfPlotStat, listSeries1Val,strDep1Stat,strDep1Name);
      listAllStats = append(listAllStats, listAllStats1);
    }
  }



  lables_for_x=c()
  lables_for_x_series = list();
  revisionRunList = list();
  revisionAcList = list();

  for( ind in 1: length(listAllStats) ){
    result = NULL
    lables_for_x=c()
    listAllStatsName = names(listAllStats)[ind];
    # sort data by fcst_valbid_beg assending and fcst_lead descending
    sorted_series_data = listAllStats[[listAllStatsName]] [with( listAllStats[[listAllStatsName]] , order(fcst_valid_beg, -fcst_lead)),];

    #get unique fcst_valid_beg
    unique_fcst_valid_beg = unique(sorted_series_data$fcst_valid_beg);

    #for each fcst_valid_beg calculate the difrensies

    for(valid in unique_fcst_valid_beg){
      data_for_valid = sorted_series_data[ sorted_series_data$fcst_valid_beg == valid,];

      #make sure that the data is valid
      # each valide date/time should have a unique list of lead times
      # if the least is not unique - throw an error
      if ( anyDuplicated(data_for_valid$fcst_lead) != 0){
        stop(paste("Valid date",valid,"for",listAllStatsName,"doesn't have unique lead times.", sep = " "));
      }
      if( nrow(data_for_valid) == 1){
           data_for_valid[1,]$stat_value = NA;
           data_for_valid[1,]$fcst_lead =NA;
      }else{
        for ( i in 1: (nrow(data_for_valid)-1) ) {
          data_for_valid[i,]$stat_value = data_for_valid[i+1,]$stat_value - data_for_valid[i,]$stat_value;
          data_for_valid[i,]$fcst_lead =NA;
        }
        data_for_valid <- data_for_valid[-nrow(data_for_valid),]
      }
      lables_for_x = c(lables_for_x, data_for_valid$fcst_lead);
      if(is.null(result)){
        result = data_for_valid;
      }else{
        result = merge(result,data_for_valid, all=TRUE, sort=FALSE);
      }
    }


    if(revisionRun){
      revisionRunList[[ind]] = runs.test(result$stat_value,alternative='left.sided')$p.value;
    }
    if(revisionAc){
      acf_value=acf(result$stat_value,type='correlation',na.action = na.pass, plot=FALSE);
      r= acf_value$acf[2];
      p = qnorm((1 + 0.05)/2)/sqrt(acf_value$n.used)
      revisionAcList[[ind]] = c(r,p);
    }

    listSeries1[[ind]] = result$stat_value;
    lables_for_x_series[[ind]] = lables_for_x;

    listLegendNotOrdered[intLegendIndex] = listAllStatsName;
    intLegendIndex = intLegendIndex + 1;
  }


  lables_for_x = lables_for_x_series[[1]]



  # sort and dump the y1 axis series data points into a file suffixed .points1
  if( TRUE == boolDumpPoints1 ){
    listSeriesOrdered=list();
    oldInd=1;
    for(index in 1:length(listPlotOrderSeries1Part)){
      newInd = (3 * listPlotOrderSeries1Part[index]) -2;
      for(i in 0:2){
        listSeriesOrdered[newInd+i]=listSeries1[oldInd+i];
      }
      oldInd = oldInd +3;
    }

    strPointsFile = sub("\\.data$", ".points1", strDataFile, perl=TRUE);
    write.table(listSeriesOrdered, file=strPointsFile, quote=FALSE, row.names=FALSE, col.names=FALSE);
  }




  #replace with user's legends
  if( 0 < length(listLegendUsr) ){
    for(index in 1:length(listLegendUsr)){
      if(nchar(listLegendUsr[index]) > 0){
        listLegendNotOrdered[index]=listLegendUsr[index];
      }
    }
  }

  if(revisionRun || revisionAc) {
    for (index in 1:length(listLegendNotOrdered)) {
      if (revisionRun) {
        p_value = revisionRunList[[index]];
        if (is.nan(p_value)) {
          p_value = 'N/A';
        } else{
          p_value = round(p_value, 2);
        }
        p_value = paste("(WW Runs Test:", p_value, ")", sep = " ");
        listLegendNotOrdered[index] = paste(listLegendNotOrdered[index], p_value, " ");
      }
      if (revisionAc) {
        p_value = revisionAcList[[index]][2];
        if (is.nan(p_value)) {
          p_value = 'N/A';
        } else{
          p_value = round(p_value, 2);
        }
        r=revisionAcList[[index]][1];
        if (is.nan(r)) {
          r = 'N/A';
        } else{
          r = round(r, 2);
        }
        text = paste("(Auto-Corr Test: p=", p_value, ",r=", r,")", sep = " ");
      listLegendNotOrdered[index] = paste(listLegendNotOrdered[index], text, " ");
      }

    }
  }


  #order legends
  for(index in 1:length(listPlotOrderSeries)){
    listLegend[ listPlotOrderSeries[index] ]=listLegendNotOrdered[index];
  }




  # specify the output file
  strPlotType = "#<plot_type>#";
  if( "jpeg" == strPlotType ){
    jpeg(
      strPlotFile,			# output file name, with appropriate extension
      width=#<plot_width>#,	# width of the display region, in specified units
      height=#<plot_height>#,	# height of the display region, in specified units
      res=#<plot_res>#,		# resolution, in dots per inch
      units="#<plot_units>#",	# units for height and width
      pointsize = 12,
      quality = 100,
      #bg = "white",
      #type = c("cairo", "Xlib", "quartz"),
      #antialias
    );
  } else {
    bitmap(
      strPlotFile,			# output file name, with appropriate extension
      type="#<plot_type>#",	# type of bitmap
      width=#<plot_width>#,	# width of the display region, in specified units
      height=#<plot_height>#,	# height of the display region, in specified units
      res=#<plot_res>#,		# resolution, in dots per inch
      units="#<plot_units>#",	# units for height and width
      taa=4,					# bits of anti-aliasing for graphics
      gaa=4					# bits of anti-aliasing for text
    );
  }
  # specify plot window formatting
  par(
    mar=#<mar>#,			# lines of margin in form c(bottom, left, top, right)
    mgp=#<mgp>#,			# margin line for axis title, axis labels and axis line in form c(title, labels, line)
    cex=#<cex>#,			# magnification for plot text
    las=0 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  );

  par( new=FALSE);



  # update the y1-axis limits to fit the data, depending on user-specification
  dblMin=NULL;
  dblMax=NULL;
  if( 2 != length(listY1limUsr) ){

    listAllStats1List = unlist(listSeries1);
    if(box_outline == TRUE){
      dblMin = min(listAllStats1List,na.rm = TRUE);
      dblMax = max(listAllStats1List,na.rm = TRUE);
    }else{
      for(intPermIndex in 1:length(listBoxes1)){
        listBox = listBoxes1[[intPermIndex]];
        for(boxNames in names(listBox) ){
          box = listBox[[boxNames]];
          outliers = boxplot.stats_ci(box)$out;
          listNoOutliers = box [! box %in% outliers];
          dblMinCurrent = min(listNoOutliers, na.rm = TRUE);
          dblMaxCurrent = max(listNoOutliers, na.rm = TRUE);
          if (is.null(dblMin) || dblMin > dblMinCurrent) dblMin=dblMinCurrent;
          if (is.null(dblMax) || dblMax < dblMaxCurrent) dblMax=dblMaxCurrent;
        }
      }
    }
    if( 2 != length(listY1lim) ){
      listY1lim = c(dblMin, dblMax);
    } else {
      if( dblMin < listY1lim[1] ){ listY1lim = c(dblMin, listY1lim[2]); }
      if( dblMax > listY1lim[2] ){ listY1lim = c(listY1lim[1], dblMax); }
    }
  } else {
    listY1lim = listY1limUsr;
  }
  if( boolBoxPts == TRUE){
    # create the plot window
    plot(
      listX, # series x data
      rep(0, length(listX)), # series y1 data
      type="n", # series line type - p: points, l: lines, o: overplotted points and lines,
      # b or c: points joined by lines, s or S: stair steps, h: histogram, n: nothing
      xaxt="n", # x-axis type - n: no axis, s: compatibility with l and t
      xaxs="r", # x-axis style - r: regular, i: internal
      yaxt="n", # y1-axis type - n: no axis, s: compatibility with l and t
      yaxs="r", # x-axis style - r: regular, i: internal
      ylim=listY1lim, # y1-axis limits
      xlab="", # x-axis label
      ylab="", # y1-axis label
      lwd=1, # line width
      cex.lab=1, # relative axis label magnification
      cex.main=1, # relative title magnification
      cex.sub=1, # relative subtitle magnification
      fg="gray"
    );


  }




  # plot the series1 data

  # gather the information for the current box
    strColor = listColorsSeries1;
    listBox = listSeries1;

    # if only points are displayed, call the points() function
    if(!all(is.na(unlist(listBox)))){
      if( boolBoxPts == TRUE){
      intPch = listPchSeries1;
      for(ind in 1:length(listBox)){
        listPts = listBox[[ind]];
        listPtsAt = rep(listX[ind], length(listPts));
        points(
          listPtsAt, # x coordinate vector
          listPts, # y coordinate vector
          type="p", # type of plot - p: points
          pch=intPch[ind], # point symbol - see example(points)
          col=strColor[ind], # point color
          ylim=c(-2,2)
        );
      }
    } else {
      strYaxt="s";

      boxplot_ci(
            listBox, # box data as a list of vectors
            at=listX, # vector of box positions
            notch=FALSE, # draw box notces - TRUE: notches on, FALSE: notches off
            boxwex=0.2, # scale factor to apply to all box widths
            col=strColor, # box color(s)
            outline=box_outline,# draw outliers - TRUE: draw, FALSE: no draw
            xaxt="n", # x-axis type - n: no axis, s: compatibility with l and t
            yaxt="n", # y-axis type - n: no axis, s: compatibility with l and t
            ylim=listY1lim, # y1-axis limits
            add=FALSE, # add boxes to current plot - TRUE: add, FALSE: new plot
            tck=.01, # length of tick marks as a fraction of plot window
            alpha=0.05 # alpha value to use when calculating confidence intervals
          );
      }


    # add the average starts to the plot, if requested
    if( boolBoxAvg ){
      points(listAt, listMeans1[[intPermIndex]], type="p", pch=8);
    }


  # specify the y1-axis
  axis(
    2,      			# axis of interest, 1: below, 2: left, 3: above and 4: right
    labels=TRUE,			# tick labels on/off
    tick=TRUE,				# tick marks on/off
    tck=.01, 				# length of tick marks as a fraction of plot window
    las=#<ytlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
    padj=#<ytlab_perp>#,	# axis label perpendicular location adjustment
    hadj=#<ytlab_horiz>#,	# axis label parallel location adjustment
    cex.axis=#<ytlab_size>#,# relative axis label magnification
    col="gray"				# axis color
  );

  # y1-axis label
  mtext(
    "#<y1_label>#",  		# label
    font=#<ylab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
    las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
    side=2,					# axis of interest, 1: below, 2: left, 3: above and 4: right
    cex=#<ylab_size>#,		# relative axis label magnification
    padj=#<ylab_offset>#,	# axis label perpendicular location adjustment
    adj=#<ylab_align>#,		# axis label parallel location adjustment
    line=1					# margin line, starting at 0 counting outwards
  );




  # add grid lines to the plot, if requested
  if( TRUE == boolGridOn ){
    grid(
      lty=#<grid_lty>#,		# line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
      col="#<grid_col>#",		# line color
      lwd=#<grid_lwd>#,		# line width
      nx=0,					# number of cells in x direction, NULL for default
      ny=NULL					# number of cells in y direction, NULL for default
    );
  }


  # plot title
  mtext(
    "#<plot_title>#",		# label
    font=#<title_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
    las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
    side=3,					# axis of interest, 1: below, 2: left, 3: above and 4: right
    cex=#<title_size>#,		# relative magnification
    padj=#<title_offset>#,	# axis label perpendicular location adjustment
    adj=#<title_align>#,	# axis label parallel location adjustment
    line=1					# margin line, starting at 0 counting outwards
  );


  # specify the x-axis
  axis(
    1,    				# axis of interest, 1: below, 2: left, 3: above and 4: right
    at=listX,				# locations of tick marks
    labels=x_axis_lables,	# axis labels
    tick=TRUE,				# tick marks on/off
    tck=.01, 				# length of tick marks as a fraction of plot window
    las=#<xtlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
    padj=#<xtlab_perp>#,	# axis label perpendicular location adjustment
    hadj=#<xtlab_horiz>#,	# axis label parallel location adjustment
    cex.axis=#<xtlab_size>#,# relative axis label magnification
    col="gray"				# axis color
  );


  # x-axis label
  mtext(
    "#<x_label>#",			# label
    font=#<xlab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
    las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
    side=1,					# axis of interest, 1: below, 2: left, 3: above and 4: right
    cex=#<xlab_size>#,		# relative axis label magnification
    padj=#<xlab_offset>#,	# axis label perpendicular location adjustment
    adj=#<xlab_align>#,		# axis label parallel location adjustment
    line=1					# margin line, starting at 0 counting outwards
  );





  intX2Axis = 3;
  # add the number of stats at each independent axis tick, if requested
  if( TRUE == boolShowNStats ){
    axis(
      intX2Axis,				# axis of interest, 1: below, 2: left, 3: above and 4: right
      at=listX,				# locations of tick marks
      labels=listNStats,		# axis labels
      tick=TRUE,				# tick marks on/off
      tck=.01, 				# length of tick marks as a fraction of plot window
      las=1,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
      padj=1,	# axis label perpendicular location adjustment
      hadj=.5,	# axis label parallel location adjustment
      cex.axis=.8,# relative axis label magnification
      col="gray"				# axis color
    );

    mtext(
      "NStats",				# label
      las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
      side=intX2Axis,			# axis of interest, 1: below, 2: left, 3: above and 4: right
      font=1,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
      cex=.8,		# relative axis label magnification
      padj=-.5,	# axis label perpendicular location adjustment
      adj=.5,	# axis label parallel location adjustment
      line=1					# margin line, starting at 0 counting outwards
    );
  }

  # add the number of stats at each independent axis tick, if requested
  if( 0 < length(listSeriesNobs) ){

    # build a data frame of nobs series data
    dfNobs = dfPlot;
    for(strSeriesNobsVar in names(listSeriesNobs)){
      strSeriesNobsVal = listSeriesNobs[[strSeriesNobsVar]];
      dfNobs = dfNobs[dfNobs[[strSeriesNobsVar]] == strSeriesNobsVal,];
    }

    # build the list of nobs, one for each independent variable value
    listNobs = c();
    listObsRate = c();
    for(strIndyVal in listIndy){
      dblTotalSum = sum(dfNobs[dfNobs[[strIndyVar]] == strIndyVal,]$total);
      dblNobsSum = sum(dfNobs[dfNobs[[strIndyVar]] == strIndyVal,]$nobs);
      listNobs = append(listNobs, dblNobsSum);
      listObsRate = append(listObsRate, dblNobsSum / dblTotalSum);
    }
    listNobsLabels = gsub(" ", "", formatC(round(listNobs), format="G", digits=6));
    listObsRateLabels = formatC(listObsRate, format="f", digits=4);
    listX2Labels = paste(listObsRateLabels, paste("(", listNobsLabels, ")", sep=""));

    axis(
      3,						# axis of interest, 1: below, 2: left, 3: above and 4: right
      at=listX,				# locations of tick marks
      labels=listX2Labels,	# axis labels
      tick=TRUE,				# tick marks on/off
      tck=.01, 				# length of tick marks as a fraction of plot window
      las=#<x2tlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
      padj=#<x2tlab_perp>#,	# axis label perpendicular location adjustment
      hadj=#<x2tlab_horiz>#,	# axis label parallel location adjustment
      cex.axis=#<x2tlab_size>#,# relative axis label magnification
      col="black"				# axis color
    );

    mtext(
      "Observation Rate",		# label
      las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
      side=3,					# axis of interest, 1: below, 2: left, 3: above and 4: right
      font=#<x2lab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
      cex=#<x2lab_size>#,		# relative axis label magnification
      padj=#<x2lab_offset>#,	# axis label perpendicular location adjustment
      adj=#<x2lab_align>#,	# axis label parallel location adjustment
      line=1					# margin line, starting at 0 counting outwards
    );
  }





  # display on the labels and colors for visible series
  listLegendDisp = listLegend[listPlotDispOrdered];
  listColorsDisp = listColorsOrdered[listPlotDispOrdered];

  legend(
    x="bottom",				# x coordinate of legend
    listLegendDisp,			# vector of legend labels
    col=listColorsDisp,		# vector of point and line colors
    lty=1,					# vector of line types
    lwd=5,					# line width
    cex=#<legend_size>#,	# relative magnification
    bty="#<legend_box>#",	# legend box type - o: box, n: none
    #bg="#EEEEEEFF",		# background color
    #box.lty=,				# legend box line type
    #box.lwd=,				# legend box line width
    #horiz=FALSE,			# horizontal configuration
    adj=.01,				# string adjustment for text
    xpd=TRUE,				# clipping - FALSE: plot region, TRUE: figure region, NA: device region
    ncol=#<legend_ncol>#,	# number of columns in legend
    #agginset=c(0, -.25),	# inset distance from margin
    inset=#<legend_inset>#,	# inset distance from margin
    x.intersp=1,			# horizontal character spacing factor
    y.intersp=.8			# vertical character spacing factor
  );

  # plot caption
  mtext(
    "#<plot_caption>#",		# caption
    font=#<caption_weight>#,# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
    col="#<caption_col>#",	# font color
    las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
    side=1,					# axis of interest, 1: below, 2: left, 3: above and 4: right
    cex=#<caption_size>#,	# relative magnification
    padj=#<caption_offset>#,# axis label perpendicular location adjustment
    adj=#<caption_align>#,	# axis label parallel location adjustment
    line=1					# margin line, starting at 0 counting outwards
  );

  #<plot_cmd>#

}
  invisible(dev.off());

}