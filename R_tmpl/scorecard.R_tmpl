setwd("#<r_work>#");

source("include/Compute_STDerr.R");
source("include/util_plot.R");

strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";

#
#  Plot Control Variables
#
boolEqualizeByIndep = #<equalize_by_indep>#;
boolEventEqual  = #<event_equal>#;
boolAppend = #<append_to_file>#;
statFlag = "#<stat_flag>#";

dblAlpha = 0.05;

strIndyVar    = "#<indy_var>#";

listIndy = #<indy_list>#;

listIndyPlotVal = #<indy_plot_val>#;

listDepPlot = #<dep1_plot>#;

listSeriesVal = #<series_list>#;

listFixedValEx = #<fix_val_list_eq>#;

strPlotStat = "#<plot_stat>#";

listDiffSeries=#<series_diff_list>#;

listDep1Scale = list(

);

dates=#<dates_list>#


#
#  Build the series data for the plot
#
#if fcst_var is a special char - read it as-is and do not convert
sampleData = read.delim(strDataFile,nrows=5);

if ( nrow(sampleData) > 0){
  classes <- sapply(sampleData, class);
  numeric_columns <- c('stat_value', 'stat_bcl', 'stat_bcu', 'stat_ncu', 'stat_ncl','fbs', 'fss');
  integer_columns <- c('fcst_lead','nstats');
  character_columns <- c('fcst_var', 'model', 'stat_name')
  for(col in 1:ncol(sampleData)){
    if ( is.element( names(classes)[col] , numeric_columns) ){
      classes[col]='numeric';
    } else if ( is.element( names(classes)[col] , integer_columns) ){
      classes[col]='integer';
    } else if ( is.element( names(classes)[col] , character_columns) ){
      classes[col]='character';
    }
  }
  dfPlot = read.delim(strDataFile,colClasses = classes);


  # run event equalizer, if requested
  if( FALSE != boolEventEqual  ){
    #run event equalizer on Y1
    dfPlot1 = data.frame();
    #list all fixed variables
    listFixVars=c();
    listFixVarVals = c();
    if(length(listFixedValEx) > 0){
      for(index in 1:length(listFixedValEx)){
        if(is.null(listFixVars)){
          listFixVars = names(listFixedValEx[index]);
          listFixVarVals = permute(listFixedValEx[index]);
        }else{
          listFixVars =  append(listFixVars, names(listFixedValEx[index]));
          listFixVarVals = append(listFixVarVals, permute(listFixedValEx[index]));
        }
      }
    }

    for( strDep1Name in names(listDepPlot) ){
      for( strDep1Stat in listDepPlot[[strDep1Name]] ){
        fPlot = dfPlot;
        for(strSeriesVal in names(listSeriesVal)){
          vectValPerms = c();
          for(index in 1:length(listSeriesVal[[strSeriesVal]])){
            vectValPerms= append(vectValPerms, strsplit(listSeriesVal[[strSeriesVal]][index], ",")[[1]]);
          }
          fPlot = fPlot[fPlot$fcst_var == strDep1Name & fPlot[[strSeriesVal]] %in% vectValPerms & fPlot$stat_name %in% strDep1Stat,  ];
        }
        fPlot = eventEqualize(fPlot, strIndyVar, listIndy, listSeriesVal, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
        dfPlot1 = rbind(dfPlot1, fPlot);
      }

    }

    dfPlot = dfPlot1;

    strAfrerEqualizeFile = sub("\\.dataFromDb", ".dataAfterEq", strDataFile, perl=TRUE);
    write.table(dfPlot, file=strAfrerEqualizeFile, quote=FALSE, row.names=FALSE, col.names=TRUE, sep = "\t");

  }





  # build the y1 plot series using information in the plot dataframe
  listSeries1 = list();
  listAllStats=list();
  for( strDep1Name in names(listDepPlot) ){
    for( strDep1Stat in listDepPlot[[strDep1Name]] ){

      # gather the stats that pertain to the current fcst_var and stat
      dfPlotStat = dfPlot[dfPlot$fcst_var == strDep1Name & dfPlot$stat_name == strDep1Stat,];
      dfPlotStat = scaleStats(dfPlotStat, listDep1Scale, paste(strDep1Name, "_", strDep1Stat, sep=""));

      # determine the visibility of the series for the current stat

      # build the y1 plot series using information in the plot dataframe
      listAllStats1 = buildAllStats(dfPlotStat, listSeriesVal,strDep1Stat,strDep1Name);
      listAllStats = append(listAllStats, listAllStats1);
    }
  }

  plotDataDiff=list();

  #add Y1 DIFF series - if exist
  if(length(listDiffSeries) > 0){
    for( diffSeries1Name in 1: length(listDiffSeries) ){ #1,2....

    #get  names of DIFF series
    diffSeriesVec = listDiffSeries[[diffSeries1Name]];
    derivedCurveName = getDerivedCurveName(diffSeriesVec);

    diffSeriesArr1 = strsplit(diffSeriesVec[1], ' ');
    diffSeriesArr2 = strsplit(diffSeriesVec[2], ' ');

    name1 = NA;
    name2 = NA;
    for( name in names(listAllStats) ){
      nameArr = strsplit(name, ' ');
      if(is.na(name1) && sameElements (nameArr,diffSeriesArr1) ){
        name1=name;
      }
      if(is.na(name2) &&  sameElements (nameArr,diffSeriesArr2) ){
        name2=name;
      }
      if( !is.na(name1) && !is.na(name2) ){
        break;
      }
    }

    #get plot data to calculate DIFF
    plotData1 = listAllStats[[ name1 ]];
    plotData2 = listAllStats[[ name2 ]];

    listFields = names(plotData1);
    for(indy in listIndy){
      dfStatsIndy1 = plotData1[plotData1[[strIndyVar]] == indy,];
      dfStatsIndy2 = plotData2[plotData2[[strIndyVar]] == indy,];

      if(nrow(dfStatsIndy1) != 0 && nrow(dfStatsIndy2) != 0){

        #sort data
        if( "fcst_valid_beg" %in% listFields ){ dfStatsIndy1 = dfStatsIndy1[order(dfStatsIndy1$fcst_valid_beg),]; dfStatsIndy2 = dfStatsIndy2[order(dfStatsIndy2$fcst_valid_beg),];}
        if( "fcst_valid"     %in% listFields ){ dfStatsIndy1 = dfStatsIndy1[order(dfStatsIndy1$fcst_valid),];  dfStatsIndy2 = dfStatsIndy2[order(dfStatsIndy2$fcst_valid),];   }
        if( "fcst_init_beg"  %in% listFields ){ dfStatsIndy1 = dfStatsIndy1[order(dfStatsIndy1$fcst_init_beg),];  dfStatsIndy2 = dfStatsIndy2[order(dfStatsIndy2$fcst_init_beg),];}
        if( "fcst_init"      %in% listFields ){ dfStatsIndy1 = dfStatsIndy1[order(dfStatsIndy1$fcst_init),];  dfStatsIndy2 = dfStatsIndy2[order(dfStatsIndy2$fcst_init),];    }

        derived_stat_list = calcDerivedCurveValue(dfStatsIndy1$stat_value, dfStatsIndy2$stat_value, derivedCurveName);

        derived_stat = NA;
        if( grepl('^DIFF_SIG', derivedCurveName) ){
          if(statFlag == 'EMC'){
            #ndays = as.numeric(difftime( as.Date('2018-07-07'), as.Date('2018-04-05')));
            if(length(dates) > 1){
              ndays = as.numeric(difftime( as.Date(dates[2]), as.Date(dates[1])));
            }else{
              ndays=0;
            }

            ndays=ndays+1;

            if ( ndays >= 80 ){
              alpha1=1.960  ; #95% confidence level
              alpha2=2.576  ; #99% confidence level
              alpha3=3.291  ; #99.9% confidence level
            }else if (ndays >= 40 && ndays < 80 ){
              alpha1=2.0    ; #95% confidence level
              alpha2=2.66   ; #99% confidence level
              alpha3=3.46   ; #99.9% confidence level
            } else if( ndays >= 20 && ndays < 40 ){
              alpha1=2.042  ; #95% confidence level
              alpha2=2.75   ; #99% confidence level
              alpha3=3.646  ; #99.9% confidence level
            } else if (ndays < 20 ){
              alpha1=2.228  ; #95% confidence level
              alpha2=3.169  ; #99% confidence level
              alpha3=4.587  ; #99.9% confidence level
            }
            acdm1 = mean( derived_stat_list, na.rm = TRUE );
            acdm = sum( dfStatsIndy1$stat_value - dfStatsIndy2$stat_value ) / ndays;
            std1 = sd( derived_stat_list, na.rm = TRUE );

            std = sqrt ( sum( (dfStatsIndy1$stat_value - dfStatsIndy2$stat_value - acdm) * (dfStatsIndy1$stat_value - dfStatsIndy2$stat_value -acdm) ) / ndays );
            nsz = nrow(dfStatsIndy1);

            if (nsz >= 80) {
              intvl = 1.960 * std / sqrt(nsz - 1);
            } else if (nsz >= 40 && nsz < 80) {
              intvl = 2.000 * std / sqrt(nsz - 1);
            } else if (nsz >= 20 && nsz < 40) {
              intvl = 2.042 * std / sqrt(nsz - 1);
            } else if (nsz < 20) {
              intvl = 2.228 * std / sqrt(nsz - 1);
            }
            ###--!!!!!!!!!!!!!--
            ##intvl = 1.960 * std / sqrt(nsz - 1);
            ###--!!!!!!!!!!!!!--

            if ( grepl('ME$',listDepPlot[[1]] ) || grepl('BIAS$',listDepPlot[[1]] )){ #bias
              ds = ( abs(mean(dfStatsIndy1$stat_value)) - abs(mean(dfStatsIndy2$stat_value)) )  / intvl;
            }else if ( grepl('RMSE$',listDepPlot[[1]] ) ){
              ds=( mean(dfStatsIndy1$stat_value) - mean(dfStatsIndy2$stat_value) ) / intvl;
            }else {
              ds= ( mean(dfStatsIndy2$stat_value) - mean(dfStatsIndy1$stat_value) ) / intvl;
            }
             if(!is.na(ds)){
               ds95 = (-1) * ds;
               ds99 = (-1) * ds * alpha1 / alpha2;
               ds999 = (-1) * ds * alpha1 / alpha3;

               for (index in 1:length(ds)) {
                 if (ds999[index] >= 1) {
                   derived_stat[index] = 1;
                 } else if (ds999[index] < 1 && ds99[index] >= 1) {
                   derived_stat[index] = 0.99;
                 } else if (ds99[index] < 1 && ds95[index] >= 1) {
                   derived_stat[index] = 0.95;
                 } else if (ds95[index] > -1 && ds95[index] < 1) {
                   derived_stat[index] = 0;
                 } else if (ds95[index] <= -1 && ds99[index] > -1) {
                   derived_stat[index] = -0.95;
                 } else if (ds99[index] <= -1 && ds999[index] > -1) {
                   derived_stat[index] = -0.99;
                 } else if (ds999[index] <= -1 && ds999[index] > -100.0) {
                   derived_stat[index] = -1;
                 } else if (ds999[index] < -100.0) {
                   derived_stat[index] = -1;
                 }
               }
             }else{
               derived_stat[0] = NA;
             }

          }else{
            avg = mean( derived_stat_list, na.rm = TRUE );
            sdv = sd( derived_stat_list, na.rm = TRUE );
            total = length(derived_stat_list);
            t = avg / ( sdv / sqrt(total) );
            pval = 1 - 2 * pt( abs(t), total-1,  lower.tail = FALSE);

            derived_stat = perfectScoreAdjustment( mean( dfStatsIndy1$stat_value, na.rm = TRUE ), mean( dfStatsIndy2$stat_value, na.rm = TRUE ), listDepPlot[[1]], pval);
          }
        } else if( grepl('^DIFF', derivedCurveName) ){
            derived_stat = mean( derived_stat_list, na.rm = TRUE );
        }else if(grepl('^SINGLE', derivedCurveName)){
            derived_stat = mean( dfStatsIndy1$stat_value, na.rm = TRUE );
        }



        dfStatsIndy1$stat_value = derived_stat;
       # if( grepl('^DIFF_SIG', derivedCurveName) ){
          dfStatsIndy1 = dfStatsIndy1[1,];
          # get correct fcst_lead
          fcst_leads = listSeriesVal$fcst_lead;
          for( fcst_lead in listSeriesVal$fcst_lead ){
            fscr_lead_str = paste(" ", fcst_lead, " ", sep="");
            if( grepl( fscr_lead_str, derivedCurveName) ){
              dfStatsIndy1$fcst_lead = fcst_lead;
              break;
            }
          }
          dfStatsIndy1$model = derivedCurveName;
          dfStatsIndy1$equalize = NULL;
          dfStatsIndy1$stat_ncl = NULL;
          dfStatsIndy1$stat_ncu = NULL;
          dfStatsIndy1$stat_bcl = NULL;
          dfStatsIndy1$stat_bcu = NULL;
          if( "fcst_valid_beg" %in% listFields ){
            dfStatsIndy1$fcst_valid_beg = NULL;
          }
          if( "fcst_init_beg"  %in% listFields ){
            dfStatsIndy1$fcst_init_beg = NULL;
          }
        #}

        if(length(names(plotDataDiff)) == 0){
          plotDataDiff = dfStatsIndy1;
        }else{
          plotDataDiff = merge(plotDataDiff,dfStatsIndy1,all=TRUE);
        }
      }

    }
    }
  }
  write.table(plotDataDiff, file=strPlotFile, quote=FALSE, row.names=FALSE,  sep = "\t", append=boolAppend,col.names=!boolAppend);
}
