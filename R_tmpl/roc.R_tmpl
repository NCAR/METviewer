setwd("#<r_work>#");

source("include/util_plot.R");

library(reticulate)

#use_python("/Volumes/d1/tatiana/miniconda3/envs/METviewer/bin/python", required = TRUE)
#use_virtualenv("/Volumes/d1/tatiana/miniconda3/envs/METviewer")
#source_python('/Users/tatiana/PycharmProjects/METviewer/event_equalize.py')

use_python("/d3/projects/METViewer/envs/bin/python", required = TRUE)
use_virtualenv("/d3/projects/METViewer/envs")
source_python('/d3/projects/METViewer/METcalcpy/metcalcpy/event_equalize.py')

py_config()

sys = import('sys')

strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";

boolRocPct = #<roc_pct>#;
boolRocCtc = #<roc_ctc>#;

listSeries1Val = #<series1_list>#;

listLegendUsr = #<legend>#;

listPlotDisp	= #<plot_disp>#;

listPlotOrderSeries	= #<order_series>#;

listStatisticsCurvs	= #<summary_curves>#;

addPointThresholds = #<add_point_thresholds>#;

boolEqualizeByIndep = #<equalize_by_indep>#;
boolEventEqual  = #<event_equal>#;
listFixedValEx = #<fix_val_list_eq>#;

options(warn=1)

drawLine <- function(dfPerm,envir, intPermVal=1) {

  # create the ROC points using PCT data
  if(nrow(dfPerm) > 0){
    if( TRUE == boolRocPct ){
      dfROC = calcPctROC(dfPerm);
      # create the ROC points using the CTC data
    } else if( TRUE == boolRocCtc ){

      # create the ROC point data from the components of the contingency tables
      dfROC = dfPerm[rev(order(dfPerm$fcst_thresh)),];
      dfROC$pody = dfROC$fy_oy / (dfROC$fy_oy + dfROC$fn_oy);
      dfROC$pofd = dfROC$fy_on / (dfROC$fy_on + dfROC$fn_on);

    }

    # initialize the plot data, appending a beginning and end point
    listPOFD = c(1, dfROC$pofd, 0);
    listPODY = c(1, dfROC$pody, 0);
    if("thresh" %in% colnames(dfROC)){
      listThresh = c("", as.vector(dfROC$thresh), "");
    }else{
      listThresh = c("", as.vector(dfROC$fcst_thresh), "");
    }
  }else{
    dfROC=NA;
  }
  if(!envir$isPlotCreated & !all(is.na(dfROC))) {
    # create a new plot with no axes
    plot(
      x=listPOFD, # series x data
      y=listPODY, # series y data
      type="n", # series line type - p: points, l: lines, o: overplotted points and lines,
      # b or c: points joined by lines, s or S: stair steps, h: histogram, n: nothing
      xaxt="n", # x-axis type - n: no axis, s: compatibility with l and t
      xaxs="r", # x-axis style - r: regular, i: internal
      yaxt="n", # y1-axis type - n: no axis, s: compatibility with l and t
      yaxs="r", # x-axis style - r: regular, i: internal
      xlim=c(0,1), # x-axis limits in form c(x1,x2); x1 > x2 reverses axis
      ylim=c(0,1), # y1-axis limits
      xlab="", # x-axis label
      ylab="", # y1-axis label
      fg="gray"
    );

    # specify the axis formatting
    par(
      usr=c(0, 1, 0, 1), # vector c(x1, x2, y1, y2) giving the extreme coordinates of the plotting region
      xpd=NA # plot clipping - FALSE: plot, TRUE: figure, NA: device
    );

    # plot title
    mtext(
      "#<plot_title>#", # label
      font=2, # 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
      las=0, # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
      side=3, # axis of interest, 1: below, 2: left, 3: above and 4: right
      cex=1.4, # relative magnification
      padj=-2, # axis label perpendicular location adjustment
      adj=0.5, # axis label parallel location adjustment
      line=1 # margin line, starting at 0 counting outwards
    );

    # x-axis label
    mtext(
      "#<x_label>#", # label
      font=1, # 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
      las=0, # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
      side=1, # axis of interest, 1: below, 2: left, 3: above and 4: right
      cex=1, # relative axis label magnification
      padj=2, # axis label perpendicular location adjustment
      adj=0.5, # axis label parallel location adjustment
      line=1 # margin line, starting at 0 counting outwards
    );

    # specify the x-axis
    axis(
      1, # axis of interest, 1: below, 2: left, 3: above and 4: right
      at=seq(0,1,.1), # locations of tick marks
      tick=TRUE, # tick marks on/off
      tck=.01, # length of tick marks as a fraction of plot window
      las=1, # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
      padj=-0.75, # axis label perpendicular location adjustment
      hadj=0.5, # axis label parallel location adjustment
      cex.axis=1,# relative axis label magnification
      col="gray" # axis color
    );

    # y-axis label
    mtext(
      "#<y1_label>#", # label
      font=1, # 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
      las=0, # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
      side=2, # axis of interest, 1: below, 2: left, 3: above and 4: right
      cex=1, # relative axis label magnification
      padj=-2, # axis label perpendicular location adjustment
      adj=0.5, # axis label parallel location adjustment
      line=1 # margin line, starting at 0 counting outwards
    );

    # specify the y-axis
    axis(
      2, # axis of interest, 1: below, 2: left, 3: above and 4: right
      at=seq(0,1,.1), # locations of tick marks
      labels=TRUE, # tick labels on/off
      tick=TRUE, # tick marks on/off
      tck=.01, # length of tick marks as a fraction of plot window
      las=1, # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
      padj=0.5, # axis label perpendicular location adjustment
      hadj=0.5, # axis label parallel location adjustment
      cex.axis=1,# relative axis label magnification
      col="gray" # axis color
    );
    # draw the no-skill line
    abline(
    	a=0,					# intercept
    	b=1,					# slope
    	lty=2,					# line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
    	col="gray",				# line color
    	lend=1,					# line end style - 0: rounded, 1: butt, 2: square
    	cex=1,					# line magnification
    	lwd=1.5,				# line width
    	xpd=FALSE				# plot clipping - FALSE: plot, TRUE: figure, NA: device
    );

    envir$isPlotCreated=TRUE;
  }

  actualInd = listPlotOrderSeries[intPermVal];

  #if do not show or no data - continue to the next
  if(listPlotDisp[actualInd] & !all(is.na(dfROC))) {

    # plot the series line
    lines(
      x=listPOFD, # x coordinates
      y=listPODY, # y coordinates
      type=listType[actualInd], # series line type - p: points, l: lines, o: overplotted points and lines,
      # b or c: points joined by lines, s or S: stair steps, h: histogram, n: nothing
      pch=listPch[actualInd], # point symbol - see example(points)
      font=5, # 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
      lty=listLty[actualInd], # line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
      col=listColors[actualInd], # line color
      lend=1, # line end style - 0: rounded, 1: butt, 2: square
      cex=1, # line magnification
      lwd=listLwd[actualInd] # line width
    );

    # add point thresholds
    if(addPointThresholds){
      text(
        x=listPOFD, # x coordinates
        y=listPODY, # y coordinates
        labels=listThresh, # point thresholds
        adj=c(-.2,1) # relative position adjustment
      );
    }
  }
}



dfData = read.delim(strDataFile, header=TRUE, row.names=NULL);
legend=c();
env <- new.env(parent=emptyenv())
env$isPlotCreated=FALSE;

if(length(listSeries1Val) > 0){
  listSeriesVar = names(listSeries1Val);
  matPermVal = permute(listSeries1Val);
  intSeriesIndex=0;
  series = list();
}

# specify the output file
strPlotType = "#<plot_type>#";
if( "jpeg" == strPlotType ){
  jpeg(
  		strPlotFile,			      # output file name, with appropriate extension
  		width=#<plot_width>#,	  # width of the display region, in specified units
  		height=#<plot_height>#,	# height of the display region, in specified units
  		res=#<plot_res>#,		    # resolution, in dots per inch
  		units="#<plot_units>#",	# units for height and width
  		pointsize = 12,
  		quality = 100
  		#bg = "white",
  		#type = c("cairo", "Xlib", "quartz"),
  		#antialias
  	);
} else {
  bitmap(
  		strPlotFile,			      # output file name, with appropriate extension
  		type="#<plot_type>#",	  # type of bitmap
  		width=#<plot_width>#,	  # width of the display region, in specified units
  		height=#<plot_height>#,	# height of the display region, in specified units
  		res=#<plot_res>#,		    # resolution, in dots per inch
  		units="#<plot_units>#",	# units for height and width
  		taa=4,					        # bits of anti-aliasing for graphics
  		gaa=4					          # bits of anti-aliasing for text
  	);
}

# specify plot window formatting
par(
  mar=c(8, 4, 5, 4), # lines of margin in form c(bottom, left, top, right)
  mgp=c(1, 1, 0), # margin line for axis title, axis labels and axis line in form c(title, labels, line)
  cex=1, # magnification for plot text
  las=2 # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
);

# store the series formatting for the ROC curve
listColors = #<colors>#;
listPch = #<pch>#;
listType = #<type>#;
listLty = #<lty>#;
listLwd = #<lwd>#;

intCurveNum = 0;


# run event equalizer, if requested
if( FALSE != boolEventEqual  ){
  dfPlot = data.frame();
  #list all fixed variables
  listFixVars=c();
  listFixVarVals = c();
  if(length(listFixedValEx) > 0){
    for(index in 1:length(listFixedValEx)){
      if(is.null(listFixVars)){
        listFixVars = names(listFixedValEx[index]);
        listFixVarVals = permute(listFixedValEx[index]);
      }else{
        listFixVars =  append(listFixVars, names(listFixedValEx[index]));
        listFixVarVals = append(listFixVarVals, permute(listFixedValEx[index]));

      }
    }
  }
  if(boolRocPct){
    #add thresh_i
    unique_i_thresh=unique(dfData$thresh_i)
    matPerm = matrix(nrow=length(unique_i_thresh), ncol=1);
    matPerm[1:length(unique_i_thresh),] = unique_i_thresh;

    matPerm1 = matrix(nrow=1, ncol=length(unique_i_thresh));
    matPerm1[1,] = unique_i_thresh;

    if(is.null(listFixVars)){
      listFixVars = "thresh_i";
      listFixVarVals[[1]] = matPerm;
    }else{
      listFixVars =  append(listFixVars, 'thresh_i');
      listFixVarVals [[length(listFixVarVals)+1]] =  matPerm[,1];
    }
  }

  if(length(listSeries1Val) > 0){
    for(intPermVal in 1:nrow(matPermVal)){
      listPermVal = matPermVal[intPermVal,];
      dfPerm = dfData;
      for(intVar in 1:length(listSeriesVar)){
        valPerm = listPermVal[intVar];
        if( grepl("^[0-9]+$", valPerm) ){ valPerm = as.integer(valPerm); }
        dfPerm = dfPerm[dfPerm[[ listSeriesVar[intVar] ]] == valPerm,];
        #dfData_ee = eventEqualize(dfPerm, "fcst_valid_beg", NA, intVar, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
        dfData_ee = event_equalize(dfPerm, "fcst_valid_beg", NA, listSeries1Val, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
        sys$stdout$flush()
        dfPlot = rbind(dfPlot, dfData_ee);
      }
    }
  }else{
    #dfPlot = eventEqualize(dfData, "fcst_valid_beg", NA, list(), listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
    dfPlot = event_equalize(dfData, "fcst_valid_beg", NA, list(), listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
    sys$stdout$flush()
  }
  dfData = dfPlot
}

#calculate sum
if(boolRocPct){
  sum_by = list(thresh_i=dfData$thresh_i, i_value=dfData$i_value);
  on_columns = c("thresh_i", "i_value")
  oy_columns = c("thresh_i", "i_value")
  merge_columns=c("thresh_i","i_value");
  for(seriesVal in names(listSeries1Val)){
    sum_by[seriesVal]=dfData[seriesVal]
    on_columns = c(on_columns, seriesVal)
    oy_columns = c(oy_columns, seriesVal)
    merge_columns = c(merge_columns, seriesVal)
  }
  on_columns = c(on_columns, "on_i")
  oy_columns = c(oy_columns, "oy_i")


  on=setNames(aggregate(x=dfData$on_i, by=sum_by, FUN=sum), on_columns)
  oy=setNames(aggregate(x=dfData$oy_i, by=sum_by, FUN=sum), oy_columns)
  dfData=merge(on, oy, by=merge_columns)
} else {
   sum_by = list(fcst_thresh=dfData$fcst_thresh);
   fy_oy_columns =  c("fcst_thresh")
   fy_on_columns =  c("fcst_thresh")
   fn_oy_columns =  c("fcst_thresh")
   fn_on_columns =  c("fcst_thresh")
   merge_columns=c("fcst_thresh");
   for(seriesVal in names(listSeries1Val)){
     sum_by[seriesVal]=dfData[seriesVal]
     fy_oy_columns = c(fy_oy_columns, seriesVal)
     fy_on_columns = c(fy_on_columns, seriesVal)
     fn_oy_columns = c(fn_oy_columns, seriesVal)
     fn_on_columns = c(fn_on_columns, seriesVal)
     merge_columns = c(merge_columns, seriesVal)
   }
   fy_oy_columns = c(fy_oy_columns, "fy_oy")
   fy_on_columns = c(fy_on_columns, "fy_on")
   fn_oy_columns = c(fn_oy_columns, "fn_oy")
   fn_on_columns = c(fn_on_columns, "fn_on")

   fy_oy=setNames(aggregate(x=as.numeric(dfData$fy_oy), by=sum_by, FUN=sum), fy_oy_columns)
    fy_on=setNames(aggregate(x=as.numeric(dfData$fy_on), by=sum_by, FUN=sum), fy_on_columns)
    fn_oy=setNames(aggregate(x=as.numeric(dfData$fn_oy), by=sum_by, FUN=sum), fn_oy_columns)
    fn_on=setNames(aggregate(x=as.numeric(dfData$fn_on), by=sum_by, FUN=sum), fn_on_columns)
   dfData1=merge(fy_oy, fy_on, by=merge_columns)
   dfData2=merge(fn_oy,fn_on, by=merge_columns)
   dfData=merge(dfData1,dfData2, by=merge_columns)

 }


if(length(listSeries1Val) > 0){
  for(intPermVal in 1:nrow(matPermVal)){
    seriesLegend="";
    listPermVal = matPermVal[intPermVal,];
    dfPerm = dfData;
    for(intVar in 1:length(listSeriesVar)){
      valPerm = listPermVal[intVar];
      if( grepl("^[0-9]+$", valPerm) ){ valPerm = as.integer(valPerm); }
      dfPerm = dfPerm[dfPerm[[ listSeriesVar[intVar] ]] == valPerm,];
      seriesLegend = paste(seriesLegend,valPerm);
    }

    seriesLegend = paste(seriesLegend,'ROC Curve');
    legend=append(legend, seriesLegend);
    drawLine(dfPerm,envir=env, intPermVal);
    intCurveNum = intPermVal;
  }
}else{
  dfPerm = dfData;
  legend=append(legend, 'ROC Curve');
  drawLine(dfPerm,envir=env);
  intCurveNum = 1;
}
#adding sum curevs
if(length(listStatisticsCurvs) > 0){
  intPermVal = intCurveNum + 1;
  if( TRUE == boolRocPct ){
    for(index in 1:length(listStatisticsCurvs)){
      groupStats_oy_i = aggregate(oy_i ~ thresh_i, data = dfData, FUN = listStatisticsCurvs[index]);
      groupStats_on_i = aggregate(on_i ~ thresh_i, data = dfData, FUN = listStatisticsCurvs[index]);
      dfPerm= merge(groupStats_oy_i, groupStats_on_i,by="thresh_i");
      seriesLegend = paste(listStatisticsCurvs[index],'ROC Curve');
      legend=append(legend, seriesLegend);
      drawLine(dfPerm,envir=env, intPermVal);
    }
  }else{

    for(index in 1:length(listStatisticsCurvs)){
      groupStats_fy_oy =  aggregate(fy_oy ~ fcst_thresh, data = dfData, FUN = listStatisticsCurvs[index]);
      groupStats_fn_oy =  aggregate(fn_oy ~ fcst_thresh, data = dfData, FUN = listStatisticsCurvs[index]);
      groupStats_fy_on =  aggregate(fy_on ~ fcst_thresh, data = dfData, FUN = listStatisticsCurvs[index]);
      groupStats_fn_on =  aggregate(fn_on ~ fcst_thresh, data = dfData, FUN = listStatisticsCurvs[index]);
      dfPerm= merge(groupStats_fy_oy, groupStats_fn_oy, by="fcst_thresh");
      dfPerm= merge(dfPerm, groupStats_fy_on, by="fcst_thresh");
      dfPerm= merge(dfPerm, groupStats_fn_on, by="fcst_thresh");
      seriesLegend = paste(listStatisticsCurvs[index],'ROC Curve');
      legend=append(legend, seriesLegend);
      drawLine(dfPerm,envir=env, intPermVal);
    }
  }
}

#replace with user's legends
if( 0 < length(listLegendUsr) ){
  for(index in 1:length(listLegendUsr)){
    if(nchar(listLegendUsr[index]) > 0){
      legend[index]=listLegendUsr[index];
    }
  }
}

listColorsOrdered=c();
listLegendOrdered=c();
listLtyOrdered=c();
listLwdOrdered=c();
listPchOrdered=c();
listPlotDispOrdered=c();
for(index in 1:length(listPlotOrderSeries)){
  listLwdOrdered[listPlotOrderSeries[index]]=listLwd[index];
  listColorsOrdered[listPlotOrderSeries[index]]=listColors[index];
  listLegendOrdered[listPlotOrderSeries[index]]=legend[index];
  listLtyOrdered[listPlotOrderSeries[index]]=listLty[index];
  listPchOrdered[listPlotOrderSeries[index]]=listPch[index];
  listPlotDispOrdered[listPlotOrderSeries[index]]=listPlotDisp[index];
}

listLwdLeg = listLwdOrdered;
listLwdLeg[listLwdLeg > 3] = 3;

# mask the hidden elements from the legend and color list
listLegendDisp = listLegendOrdered[listPlotDispOrdered];
listColorsDisp = listColorsOrdered[listPlotDispOrdered];
listLtyDisp    = listLtyOrdered[listPlotDispOrdered];
listPchDisp    = listPchOrdered[listPlotDispOrdered];

# add the legend
legend(
  x="bottom",						      # x coordinate of legend
  listLegendDisp,					    # vector of legend labels
  col=listColorsDisp,				  # vector of point and line colors
  lty=listLtyDisp,				    # vector of line types
  lwd=listLwdLeg,					    # vector of line widths
  pch=listPchDisp,				    # vector of point symbols
  merge=FALSE,					      # merge points and lines
	cex=#<legend_size>#,			  # relative magnification
	bty="#<legend_box>#",			  # legend box type - o: box, n: none
  #bg="#EEEEEEFF",				    # background color
  #box.lty=,						      # legend box line type
  #box.lwd=,						      # legend box line width
  #horiz=FALSE,					      # horizontal configuration
  adj=0,							        # string adjustment for text
  xpd=TRUE,						        # clipping - FALSE: plot region, TRUE: figure region, NA: device region
	ncol=#<legend_ncol>#,			  # number of columns in legend
  #agginset=c(0, -.25),			  # inset distance from margin
	inset=#<legend_inset>#,			# inset distance from margin
  x.intersp=1,					      # horizontal character spacing factor
  y.intersp=.8					      # vertical character spacing factor
);


# plot caption
mtext(
	"#<plot_caption>#",				# caption
	font=#<caption_weight>#,		# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	col="#<caption_col>#",			# font color
	las=0, 							# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=1,							# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<caption_size>#,			# relative magnification
	padj=#<caption_offset>#,		# axis perpendicular location adjustment
	adj=#<caption_align>#,			# axis parallel location adjustment
	line=1							# margin line, starting at 0 counting outwards
);

#<plot_cmd>#

invisible(dev.off());

