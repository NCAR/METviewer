setwd("#<r_work>#");

source("include/Compute_STDerr.R");
source("include/util_plot.R");

strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";

#
#  Plot Control Variables
#

boolEventEqual	= #<event_equal>#;
boolPlot1Diff	= #<plot1_diff>#;
boolShowNStats	= #<show_nstats>#;
boolGridOn		= #<grid_on>#;
boolLogY1		= #<log_y1>#;
boolVarianceInflationFactor = #<variance_inflation_factor>#;


listY1limUsr	= #<y1_lim>#;

listPlotCI		= #<plot_ci>#;

listPlotDisp	= #<plot_disp>#;

dfPlot = read.delim(strDataFile);

strIndyVar = "#<indy_var>#";

listDep1Plot = #<dep1_plot>#;

listAggVal = #<agg_list>#;

listSeries1Val = #<series1_list>#;

listDep1Scale = #<dep1_scale>#;

strPlotStat = "#<plot_stat>#";


#
#  Build the series data for the plot 
#

listIndy = #<indy_list>#;

listLegend = c();

# determine the number of curves in the first series
intNumSeries1 = 1;
for(strSeriesVar in names(listSeries1Val)){ intNumSeries1 = intNumSeries1 * length( listSeries1Val[[ strSeriesVar ]] ); }		

# build the y1 plot series using information in the plot dataframe
listSeries1 = list();
for( strDep1Name in names(listDep1Plot) ){
	for( strDep1Stat in listDep1Plot[[strDep1Name]] ){
		
		dfPlotStat = dfPlot[dfPlot$fcst_var == strDep1Name & dfPlot$stat_name == strDep1Stat,];
		dfPlotStat = scaleStats(dfPlotStat, listDep1Scale, paste(strDep1Name, "_", strDep1Stat, sep=""));
		
		# build the y1 plot series using information in the plot dataframe
		listPlotData1 = buildSeries(dfPlotStat, strIndyVar, listIndy, strDep1Stat, listSeries1Val, listPlotDisp, 
									boolPlot1Diff, listPlotCI[1:intNumSeries1],boolVarianceInflationFactor, strPlotStat);
		listSeries1 = append(listSeries1, listPlotData1$series);
		listNStats  = listPlotData1$nstats;
		listLegend1 = paste(listPlotData1$legend, strDep1Stat);
		listLegend = append(listLegend, listLegend1);
	}
}

# specify the output file
strPlotType = "#<plot_type>#";
if( "jpeg" == strPlotType ){
	jpeg(
		strPlotFile,			# output file name, with appropriate extension 
		width=#<plot_width>#,	# width of the display region, in specified units
		height=#<plot_height>#,	# height of the display region, in specified units
		res=#<plot_res>#,		# resolution, in dots per inch
		units="#<plot_units>#",	# units for height and width
		pointsize = 12,
		quality = 100,
		#bg = "white",
		#type = c("cairo", "Xlib", "quartz"),
		#antialias
	);
} else {
	bitmap(
		strPlotFile,			# output file name, with appropriate extension 
		type="#<plot_type>#",	# type of bitmap
		width=#<plot_width>#,	# width of the display region, in specified units
		height=#<plot_height>#,	# height of the display region, in specified units
		res=#<plot_res>#,		# resolution, in dots per inch
		units="#<plot_units>#",	# units for height and width
		taa=4,					# bits of anti-aliasing for graphics
		gaa=4					# bits of anti-aliasing for text
	);
}

# specify plot window formatting
par( 
	mar=#<mar>#,			# lines of margin in form c(bottom, left, top, right)
	mgp=#<mgp>#,			# margin line for axis title, axis labels and axis line in form c(title, labels, line)
	cex=#<cex>#,			# magnification for plot text
	las=2, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	fg="black"
);

# specify the series formatting
listColors = #<colors>#;
listColorsDisp = listColors[listPlotDisp];

# arrange the series data into a matrix for the barplot() function
listSeriesBar = listSeries1[ seq(1, length(listSeries1), 3) ];
listSeriesBar = listSeriesBar[ listPlotDisp ];
matSeriesBar = matrix(ncol=length(listSeriesBar[[1]]), nrow=length(listSeriesBar));
for(intSeries in 1:length(listSeriesBar)){ matSeriesBar[intSeries,] = listSeriesBar[[intSeries]]; }

# calculate the list of x-positions for placing ticks
intNumGroups = nrow(matSeriesBar);
intXMin = floor(nrow(matSeriesBar) / 2) + 1;
intXStep = intNumGroups + 1;
intXMax = intXMin + ( (ncol(matSeriesBar) - 1) * intXStep );
if( 1 == intNumGroups %% 2 ){ intXMin = intXMin + .5; intXMax = intXMax + .5; }
listX = seq(intXMin, intXMax, intXStep);

# determine the log axis setting
strLog = "";
if( TRUE == boolLogY1 ){
	strLog = "y";
	listY1limUsr = c();
}

# create the bar plot
barplot(
	matSeriesBar,			# bar data 
	width = 1,				# vector of bar widths, recycled if necessary
	space = NULL,			# space left before each bar
	legend.text = NULL, 	# vector of text used to construct a legend
	beside = TRUE,			# logical value indicating stacked or side-by-side bars - TRUE: side-by-side, FALSE: stacked
	horiz = FALSE,			# logical value indicating horizontal or vertical bars
	col = listColorsDisp,	# vector of box colors
	border = par("fg"),		# box border
	tcl=.1,					# tick mark length
	log=strLog,				# log scale - 'x': x axis, 'y': y axis, 'xy': both axes
	ylim=listY1limUsr		# y axis limits
);
box();

# plot title
mtext(
	"#<plot_title>#",		# label
	font=#<title_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=3,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<title_size>#,		# relative magnification
	padj=#<title_offset>#,	# axis label perpendicular location adjustment
	adj=#<title_align>#,	# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
);

# specify the x-axis
axis(
	1,						# axis of interest, 1: below, 2: left, 3: above and 4: right 
	at=listX,				# locations of tick marks
	labels=#<indy_label>#,	# axis labels
	tick=TRUE,				# tick marks on/off
	tck=.01, 				# length of tick marks as a fraction of plot window
	las=#<xtlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	padj=#<xtlab_perp>#,	# axis label perpendicular location adjustment 
	hadj=#<xtlab_horiz>#,	# axis label parallel location adjustment 
	cex.axis=#<xtlab_size>#,# relative axis label magnification 
	col="black"				# axis color
);

# x-axis label
mtext(
	"#<x_label>#",			# label
	font=#<xlab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=1,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<xlab_size>#,		# relative axis label magnification
	padj=#<xlab_offset>#,	# axis label perpendicular location adjustment
	adj=#<xlab_align>#,		# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
);

# y-axis label
mtext(
	"#<y1_label>#",			# label
	font=#<ylab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=2,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<ylab_size>#,		# relative axis label magnification
	padj=#<ylab_offset>#,	# axis label perpendicular location adjustment
	adj=#<ylab_align>#,		# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
);

# add grid lines to the plot, if requested
if( TRUE == boolGridOn ){
	grid(
		lty=#<grid_lty>#,		# line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
		col="#<grid_col>#",		# line color
		lwd=#<grid_lwd>#,		# line width
		nx=0,					# number of cells in x direction, NULL for default
		ny=NULL					# number of cells in y direction, NULL for default
	);
}

# add the number of stats at each independent axis tick, if requested
if( TRUE == boolShowNStats ){
	axis(
		3,						# axis of interest, 1: below, 2: left, 3: above and 4: right
		at=listX,				# locations of tick marks
		labels=listNStats,		# axis labels
		tick=TRUE,				# tick marks on/off
		tck=.01, 				# length of tick marks as a fraction of plot window
		las=#<x2tlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
		padj=#<x2tlab_perp>#,	# axis label perpendicular location adjustment
		hadj=#<x2tlab_horiz>#,	# axis label parallel location adjustment
		cex.axis=#<x2tlab_size>#,# relative axis label magnification
		col="black"				# axis color
	);
	
	mtext(
		"NStats",				# label
		las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
		side=3,					# axis of interest, 1: below, 2: left, 3: above and 4: right
		font=#<x2lab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
		cex=#<x2lab_size>#,		# relative axis label magnification
		padj=#<x2lab_offset>#,	# axis label perpendicular location adjustment
		adj=#<x2lab_align>#,	# axis label parallel location adjustment
		line=1					# margin line, starting at 0 counting outwards
	);
}

# display the legend
listLegendDisp = listLegend[listPlotDisp];
legend(
	x="bottom",					# x coordinate of legend
	listLegendDisp,				# vector of legend labels
	col=listColorsDisp,			# vector of point and line colors 
	lty=1,						# vector of line types
	lwd=5,						# line width
	cex=#<legend_size>#,		# relative magnification
	bty="#<legend_box>#",		# legend box type - o: box, n: none
	#bg="#EEEEEEFF",			# background color
	#box.lty=,					# legend box line type
	#box.lwd=,					# legend box line width	
	#horiz=FALSE,				# horizontal configuration
	adj=.08,					# string adjustment for text
	xpd=TRUE,					# clipping - FALSE: plot region, TRUE: figure region, NA: device region 
	ncol=3,						# number of columns in legend
	#agginset=c(0, -.25),		# inset distance from margin
	inset=#<legend_inset>#,		# inset distance from margin
	x.intersp=1,				# horizontal character spacing factor
	y.intersp=.8				# vertical character spacing factor
);

# plot caption
mtext(
	"#<plot_caption>#",			# caption
	font=#<caption_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	col="#<caption_col>#",		# font color
	las=0, 						# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=1,						# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<caption_size>#,		# relative magnification
	padj=#<caption_offset>#,	# axis label perpendicular location adjustment
	adj=#<caption_align>#,		# axis label parallel location adjustment
	line=1						# margin line, starting at 0 counting outwards
);

#<plot_cmd>#

dev.off();

