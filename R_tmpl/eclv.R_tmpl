setwd("#<r_work>#");
source("include/Compute_STDerr.R");
source("include/util_plot.R");

library(reticulate)

#use_python("/Volumes/d1/tatiana/miniconda3/envs/METviewer/bin/python", required = TRUE)
#use_virtualenv("/Volumes/d1/tatiana/miniconda3/envs/METviewer")
#source_python('/Users/tatiana/PycharmProjects/METviewer/event_equalize.py')

use_python("/d3/projects/METViewer/envs/bin/python", required = TRUE)
use_virtualenv("/d3/projects/METViewer/envs")
source_python('/d3/projects/METViewer/METcalcpy/metcalcpy/event_equalize.py')

py_config()

sys = import('sys')

strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";


listSeries1Val = #<series1_list>#;

listFixedValEx = #<fix_val_list_eq>#;

listLegendUsr = #<legend>#;

listPlotCI    = #<plot_ci>#;

listPlotDisp  = #<plot_disp>#;

listPlotOrderSeries  = #<order_series>#;

listY1limUsr = #<y1_lim>#;

boolGridOn = #<grid_on>#;

listType = #<type>#;

listPch = #<pch>#;

listLty =  #<lty>#;

listColors = #<colors>#;

listLwd = #<lwd>#;

strPlotStat = "#<plot_stat>#";

boolDumpPoints1  = #<dump_points1>#;

boolShowNStats  = #<show_nstats>#;

boolEventEqual	= #<event_equal>#;

dblAlpha    = #<ci_alpha>#;


dfPlot = read.delim(strDataFile);


# run event equalizer, if requested
if( FALSE != boolEventEqual ){
  #run event equalizer on Y1
  #list all fixed variables
  listFixVars=c();
  listFixVarVals = c();
  if(length(listFixedValEx) > 0){
    for(index in 1:length(listFixedValEx)){
      if(is.null(listFixVars)){
        listFixVars = names(listFixedValEx[index]);
        listFixVarVals = permute(listFixedValEx[index]);
      }else{
        listFixVars = append(listFixVars, names(listFixedValEx[index]));
        listFixVarVals = append(listFixVarVals, permute(listFixedValEx[index]));
      }
    }
  }

  #dfPlot = eventEqualize(dfPlot, 'x_pnt_i', unique(dfPlot$x_pnt_i), listSeries1Val, listFixVars,listFixVarVals, TRUE, TRUE);
  dfPlot = event_equalize(dfPlot, 'x_pnt_i', unique(dfPlot$x_pnt_i), listSeries1Val, listFixVars,listFixVarVals, TRUE, TRUE);
  sys$stdout$flush()
  strAfrerEqualizeFile = sub("\\.data$", ".dataAfterEq", strDataFile, perl=TRUE);
  write.table(dfPlot, file=strAfrerEqualizeFile, quote=FALSE, row.names=FALSE, col.names=TRUE, sep = "\t");

}


legend=c();
plotListX = list();
plotListY = list();
plotListBcl = list();
plotListBcu = list();
if(length(listSeries1Val) > 0){
  listSeriesVar = names(listSeries1Val);
  matPermVal = permute(listSeries1Val);
}else{
  listSeriesVar = c();
  matPermVal = matrix();
}
intSeriesIndex=0;


suffixesInd=1;
listNStats=list();
uniqueXSize = list();
listThreshSize = list();
for(intPermVal in 1:nrow(matPermVal)){
  listX=list();
  listY=list();
  listBcl=list();
  listBcu=list();
  seriesLegend="";
  listPermVal = matPermVal[intPermVal,];
  # build a data frame containing the permutation data
  dfPerm = dfPlot;
  if(length(listSeriesVar) > 0){
    for(intVar in 1:length(listSeriesVar)){
      valPerm = listPermVal[intVar];
      if( grepl("^[0-9]+$", valPerm) ){ valPerm = as.integer(valPerm); }
      dfPerm = dfPerm[dfPerm[[ listSeriesVar[intVar] ]] == valPerm,];
      seriesLegend = paste(seriesLegend,valPerm);
    }
  }
  seriesLegend = paste(seriesLegend,'Economic value');

  legend=append(legend, seriesLegend);


  # if there is no data for this case, skip to the next permutation
  if("thresh_i" %in% names(dfPerm)){
    listThresh = unique(dfPerm$thresh_i);
  }else{
    listThresh = c(0);
  }

  listThreshSize[[intPermVal]] = length(listThresh);

  if( 1 <= nrow(dfPerm) ){
    # build the amplification for the selected value of alpha for standard error
    dblZ = qnorm(1 - (dblAlpha/2));
    dblZVal = (dblZ + dblZ/sqrt(2)) / 2;

    for(thresh in listThresh){
      if("thresh_i" %in% names(dfPerm)){
        xDfPerm = dfPerm[ dfPerm$thresh_i == thresh,];
      }else{
        xDfPerm = dfPerm;
      }
      if("stat_bcl" %in% names(dfPerm)){
        uniqueX = xDfPerm$x_pnt_i;
      }else{
        uniqueX = unique(xDfPerm$x_pnt_i);
      }
      uniqueXSize[[intPermVal]] = length( uniqueX);

      for(x in 1: length(uniqueX)){
        if("stat_bcl" %in% names(dfPerm)){
          xDfPermx = xDfPerm[x,];
        }else{
          xDfPermx = xDfPerm[xDfPerm$x_pnt_i == uniqueX[[x]] ,];
        }

        if(nrow(xDfPermx) > 1){
          if("mean" == strPlotStat){
            dblMed = mean(xDfPermx$y_pnt_i, na.rm = TRUE);
          }else if("sum" == strPlotStat){
            dblMed = sum(xDfPermx$y_pnt_i,na.rm = TRUE);
          } else {
            # use median if strPlotStat = 'median' or anything else since 'median' is the default
            dblMed = median(xDfPermx$y_pnt_i,na.rm = TRUE);
          }
          # apply the requested type of confidence interval to the current series point
          strPlotCI = listPlotCI[intPermVal];
          dblLoCI = dblMed;
          dblUpCI = dblMed;


          if( "std" == strPlotCI & 0 < sum(xDfPermx$y_pnt_i != 0, na.rm = TRUE) ){
            dblStdErr = 0;
            if("mean" == strPlotStat){
              seModel = try(Compute_STDerr_from_mean( xDfPermx$y_pnt_i, method = 'ML' ));
            }else if("sum" == strPlotStat){
              seModel = try(Compute_STDerr_from_sum( xDfPermx$y_pnt_i, method = 'ML' ));
            } else {
              seModel = try(Compute_STDerr_from_median_no_variance_inflation_factor( xDfPermx$y_pnt_i, method = 'ML' ));
            }

            if( 1 < length(seModel) && 0 == seModel[2] && !is.na(seModel[1]) ){
              dblStdErr = dblZVal * seModel[1];
            }

            listBcl[[length(listBcl)+1]] = dblMed - dblStdErr;
            listBcu[[length(listBcu)+1]] = dblMed + dblStdErr;

          } else if( "boot" == strPlotCI | "brier" == strPlotCI ){
            if( !is.null(xDfPermx$stat_bcl) & !is.null(xDfPermx$stat_bcu)){
              if( !is.na(xDfPermx$stat_bcl) & !is.na(xDfPermx$stat_bcu) & -9999 != xDfPermx$stat_bcl & -9999 != xDfPermx$stat_bcu ){
                listBcl[[length(listBcl)+1]] = xDfPermx$stat_bcl;
                listBcu[[length(listBcl)+1]] = xDfPermx$stat_bcu;
              }
            }
          } else{
            listBcl[[length(listBcl)+1]] <- NA;
            listBcu[[length(listBcu)+1]] <- NA;
          }


        }else{
          dblMed = xDfPermx$y_pnt_i;
          listBcl[[length(listBcl)+1]] <- xDfPermx$stat_bcl;
          listBcu[[length(listBcu)+1]] <- xDfPermx$stat_bcu;
        }

        listX[[length(listX)+1]] <- uniqueX[[x]];
        listY[[length(listY)+1]] <- dblMed;

        if('nstats' %in% names(xDfPermx)){
          total = xDfPermx$nstats;
        }else{
          total = length(xDfPermx$y_pnt_i[!is.na(xDfPermx$y_pnt_i)]);
        }

        if( is.null(listNStats[[toString(uniqueX[[x]])]]) ){
          listNStats[[toString(uniqueX[[x]])]] = total;
        }else{
          listNStats[[toString(uniqueX[[x]])]] = listNStats[[toString(uniqueX[[x]])]] + total;
        }
      }
    }
  }

  plotListX[[length(plotListX)+1]] <- listX;
  plotListY[[length(plotListY)+1]] <- listY;
  plotListBcl[[length(plotListBcl)+1]] <- listBcl;
  plotListBcu[[length(plotListBcu)+1]] <- listBcu;

}


# sort and dump the y1 axis series data points into a file suffixed .points1
if( TRUE == boolDumpPoints1 ){
  plotListYOrdered=list();

  for(index in listPlotOrderSeries){
    plotListYOrdered[[length(plotListYOrdered)+1]] <- plotListY[[index]];
  }

  strPointsFile = sub("\\.data$", ".points1", strDataFile, perl=TRUE);
  write.table(plotListYOrdered, file=strPointsFile, quote=FALSE, row.names=FALSE, col.names=FALSE);
}

#replace with user's legends
if( 0 < length(listLegendUsr) ){
  for(index in 1:length(listLegendUsr)){
    if(nchar(listLegendUsr[index]) > 0){
      legend[index]=listLegendUsr[index];
    }
  }
}



# specify the output file
strPlotType = "png16m";
if( "jpeg" == strPlotType ){
  jpeg(
    strPlotFile, # output file name, with appropriate extension
    width=11, # width of the display region, in specified units
    height=8.5, # height of the display region, in specified units
    res=72, # resolution, in dots per inch
    units="in", # units for height and width
    pointsize = 12,
    quality = 100
  );
} else {
  bitmap(
    strPlotFile, # output file name, with appropriate extension
    type="png16m", # type of bitmap
    width=11, # width of the display region, in specified units
    height=8.5, # height of the display region, in specified units
    res=72, # resolution, in dots per inch
    units="in", # units for height and width
    taa=4, # bits of anti-aliasing for graphics
    gaa=4 # bits of anti-aliasing for text
  );
}

# specify the y-axis limits and labels

# specify the y-axis limits and labels

if( 0 < length(listY1limUsr) ){
  dblY1Min = listY1limUsr[1];
  dblY1Max = listY1limUsr[2];
} else {
  dblY1Max = max(unlist(plotListY), na.rm = TRUE);
  dblY1Min = min(unlist(plotListY), na.rm = TRUE);
  if(!all(listPlotCI == "none")){
    if( suppressWarnings( is.infinite(max(unlist(plotListBcu), na.rm = TRUE))) ){
      if( !is.null(unlist(plotListY)) ){
        dblY1Max = max(unlist(plotListY), na.rm = TRUE);
      }
    }else{
      dblY1Max = max(unlist(plotListBcu), na.rm = TRUE);
    }

    if( suppressWarnings(is.infinite(min(unlist(plotListBcl), na.rm = TRUE))) ){
      if( !is.null(unlist(plotListY)) ){
        dblY1Min = min(unlist(plotListY), na.rm = TRUE);
      }
    }else{
      dblY1Min = min(unlist(plotListBcl), na.rm = TRUE);
    }
  }
}
listY1axp = c(dblY1Min, dblY1Max, 5);
listY1lim = c(dblY1Min, dblY1Max);

if(is.null(unlist(plotListX))){
  listXlim=c(0,1);
}else{
  listXlim = c(min(unlist(plotListX), na.rm = TRUE), max(unlist(plotListX), na.rm = TRUE));
}


# specify plot window formatting
par(
  mar=#<mar>#,			# lines of margin in form c(bottom, left, top, right)
  mgp=#<mgp>#,			# margin line for axis title, axis labels and axis line in form c(title, labels, line)
  cex=#<cex>#,			# magnification for plot text
  las=2          # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
);

intXAxis = 1;
intY1Axis = 2;
intX2Axis = 3;
intY2Axis = 4;
intGridNx = 0;
intGridNy = NULL;
listLwdLeg = listLwd;
listLwdLeg[listLwdLeg > 3] = 3;
listXSeries = do.call(c, unlist(plotListX, recursive=FALSE));
listYSeries = do.call(c, unlist(plotListY, recursive=FALSE));

# specify the plot formatting
plot(
  listXSeries, # series x data
  listYSeries, # series y1 data
  type="n", # series line type - p: points, l: lines, o: overplotted points and lines,
  # b or c: points joined by lines, s or S: stair steps, h: histogram, n: nothing
  xaxt="n", # x-axis type - n: no axis, s: compatibility with l and t
  xaxs="r", # x-axis style - r: regular, i: internal
  yaxt="n", # y1-axis type - n: no axis, s: compatibility with l and t
  yaxs="r", # x-axis style - r: regular, i: internal
  xlim=listXlim, # x-axis limits in form c(x1,x2); x1 > x2 reverses axis
  ylim=listY1lim, # y1-axis limits
  xlab="", # x-axis label
  ylab="", # y1-axis label
  lwd=1, # line width
  cex.lab=1, # relative axis label magnification
  cex.main=1, # relative title magnification
  cex.sub=1, # relative subtitle magnification
  fg="gray"
);

# draw the y=0 line
abline(
  h=0,
  lty=2, # line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
  col="gray", # line color
  lend=1, # line end style - 0: rounded, 1: butt, 2: square
  cex=1, # line magnification
  lwd=1.5, # line width
  xpd=FALSE # plot clipping - FALSE: plot, TRUE: figure, NA: device
);

# set the plot window limits

dblY1BufrPct = 0.04;
dblY1Bufr = (dblY1Max - dblY1Min) * dblY1BufrPct;
par(usr=c(par()$usr[1:2], dblY1Min - dblY1Bufr, dblY1Max + dblY1Bufr));

# plot title
mtext(
  "#<plot_title>#",        # label
  font=#<title_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0,                  # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=3,                  # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<title_size>#,		  # relative magnification
  padj=#<title_offset>#,	# axis label perpendicular location adjustment
  adj=#<title_align>#,	  # axis label parallel location adjustment
  line=1                  # margin line, starting at 0 counting outwards
);

# specify the x-axis
axis(
  intXAxis, # axis of interest, 1: below, 2: left, 3: above and 4: right
  at=unique(listXSeries), # locations of tick marks
  labels=round(unique(listXSeries), digits = 2), # axis labels
  tick=TRUE, # tick marks on/off
  tck=.01, # length of tick marks as a fraction of plot window
  las=#<xtlab_orient>#,	    # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  padj=#<xtlab_perp>#,	    # axis label perpendicular location adjustment
  hadj=#<xtlab_horiz>#,	    # axis label parallel location adjustment
  cex.axis=#<xtlab_size>#,  # relative axis label magnification
  col="gray" # axis color
);

# x-axis label
mtext(
  "#<x_label>#",        # label
  font=#<xlab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0,                # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=intXAxis,        # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<xlab_size>#,		# relative axis label magnification
  padj=#<xlab_offset>#,	# axis label perpendicular location adjustment
  adj=#<xlab_align>#,		# axis label parallel location adjustment
  line=1                # margin line, starting at 0 counting outwards
);

# specify the y-axis
axis(
  intY1Axis,                # axis of interest, 1: below, 2: left, 3: above and 4: right
  labels=TRUE,              # tick labels on/off
  tick=TRUE,                # tick marks on/off
  tck=.01,                  # length of tick marks as a fraction of plot window
  las=#<ytlab_orient>#,	    # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  padj=#<ytlab_perp>#,	    # axis label perpendicular location adjustment
  hadj=#<ytlab_horiz>#,	    # axis label parallel location adjustment
  cex.axis=#<ytlab_size>#,  # relative axis label magnification
  col="gray"                # axis color
);

# y-axis label
mtext(
  "#<y1_label>#",        # label
  font=#<ylab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0,                # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=intY1Axis,        # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<ylab_size>#,		# relative axis label magnification
  padj=#<ylab_offset>#,	# axis label perpendicular location adjustment
  adj=#<ylab_align>#,		# axis label parallel location adjustment
  line=1                # margin line, starting at 0 counting outwards
);

# add grid lines to the plot, if requested
if( TRUE == boolGridOn ){
  grid(
    lty=#<grid_lty>#,		  # line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
    col="#<grid_col>#",    # line color
    lwd=#<grid_lwd>#,		  # line width
    nx=intGridNx,          # number of cells in x direction, NULL for default
    ny=intGridNy          # number of cells in y direction, NULL for default
  );

  # calculate the grid line locations
  listXGrid = #<grid_x>#;
  intXtlabDecim = #<xtlab_decim>#;

  if( 0 < intXtlabDecim ){
    listXGrid = listXGrid[seq(from=1, to=length(listX), by=intXtlabDecim)];
  }

  abline(
    v=listXGrid, # list of positions for the gridlines
    lty=3, # line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
    col="#cccccc", # line color
    lwd=1, # line width
    cex=1 # line magnification
  );
}

# add the number of stats at each independent axis tick, if requested
if( TRUE == boolShowNStats ){

  listNStatsFinal = c();
  for(x in 1:length(listNStats) ) {
    if( !is.null(listNStats[[x]])){
      listNStatsFinal[[length(listNStatsFinal)+1]] = listNStats[[x]];
    }else{
      listNStatsFinal[[length(listNStatsFinal)+1]]=NA;
    }
  }

  axis(
    intX2Axis,                # axis of interest, 1: below, 2: left, 3: above and 4: right
    at=unique(listXSeries), # locations of tick marks
    labels=listNStatsFinal, # axis labels
    tick=TRUE,                # tick marks on/off
    tck=.01,                  # length of tick marks as a fraction of plot window
    las=#<x2tlab_orient>#,	  # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
    padj=#<x2tlab_perp>#,	    # axis label perpendicular location adjustment
    hadj=#<x2tlab_horiz>#,	  # axis label parallel location adjustment
    cex.axis=#<x2tlab_size>#, # relative axis label magnification
    col="gray"                # axis color
  );

  mtext(
    "NStats",                # label
    las=0,                  # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
    side=intX2Axis,          # axis of interest, 1: below, 2: left, 3: above and 4: right
    font=#<x2lab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
    cex=#<x2lab_size>#,		  # relative axis label magnification
    padj=#<x2lab_offset>#,	# axis label perpendicular location adjustment
    adj=#<x2lab_align>#,	  # axis label parallel location adjustment
    line=1                  # margin line, starting at 0 counting outwards
  );
}

listColorsOrdered=c();
listLtyOrdered=c();
listLwdOrdered=c();
listPchOrdered=c();
listPlotDispOrdered=c();
listPlotCIOrdered=c();
listShowSignifOrdered=c();
listTypeOrdered=c();
listLegendOrdered=c();
for(index in 1:length(listPlotOrderSeries)){
  listLwdOrdered[ listPlotOrderSeries[index] ] = listLwd[index];
  listColorsOrdered[ listPlotOrderSeries[index] ]=listColors[index];
  listLtyOrdered[ listPlotOrderSeries[index] ]=listLty[index];
  listPchOrdered[ listPlotOrderSeries[index] ]=listPch[index];
  listPlotDispOrdered[ listPlotOrderSeries[index] ]=listPlotDisp[index];
  listPlotCIOrdered[ listPlotOrderSeries[index] ]=listPlotCI[index];
  listTypeOrdered[ listPlotOrderSeries[index] ]=listType[index];
  listLegendOrdered[ listPlotOrderSeries[index] ]=legend[index];
}

# mask the hidden elements from the legend and color list
listLegendDisp = listLegendOrdered[listPlotDispOrdered];
listColorsDisp = listColorsOrdered[listPlotDispOrdered];
listLtyDisp = listLtyOrdered[listPlotDispOrdered];
listPchDisp = listPchOrdered[listPlotDispOrdered];
listTypeDisp = listTypeOrdered[listPlotDispOrdered];
listPlotCIDisp = listPlotCIOrdered[listPlotDispOrdered];


for(intPermVal in 1:nrow(matPermVal)){
  # if the current series is not displayed, continue to the next
  if( !listPlotDisp[intPermVal] ){
    next;
  }

  if( length(plotListX[[intPermVal]]) > 0 && length(plotListY[[intPermVal]]) > 0){
    threshSize = listThreshSize[[intPermVal]];
    xSize = uniqueXSize[[intPermVal]];
    for(ind in 1: threshSize){
      # plot the series line
      fromInd = (ind-1)*xSize+1;
      toInd = ind * xSize;

      # plot the series line
      lines(
        plotListX[[intPermVal]][fromInd : toInd], # x coordinates
        plotListY[[intPermVal]][fromInd : toInd], # y coordinates
        type=listType[intPermVal], # series line type - p: points, l: lines, o: overplotted points and lines,
        pch=listPch[intPermVal], # point symbol - see example(points)
        font=5, # 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
        lty=listLty[intPermVal], # line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
        col=listColors[intPermVal], # line color
        cex=1, # line magnification
        lwd=listLwd[intPermVal] # line width
      );

      # add arrows to the line, if requested
      if( "none" != listPlotCI[intPermVal] ) {
        listXAdj = plotListX[[intPermVal]][fromInd : toInd];
        listDataLo = plotListBcl[[intPermVal]][fromInd : toInd];
        listDataUp = plotListBcu[[intPermVal]][fromInd : toInd];
        if(length(listDataLo) > 0 && length(listDataUp) > 0){
          for(ind in 1: length( listXAdj) ){
            lwd_current = listLwd[intPermVal];
            if(!is.null(listDataLo[[ind]]) &&  !is.null(listDataUp[[ind]])){
              suppressWarnings(arrows(
                listXAdj[[ind]], # x coordinate from which to draw
                  listDataLo[[ind]], # y coordinate from which to draw
                  listXAdj[[ind]], # x coordinate to which to draw
                  listDataUp[[ind]], # y coordinate to which to draw
                  length=.02, # length of the edges of the arrow head (in inches)
                  angle=90, # angle from the shaft of the arrow to the edge of the arrow head
                  code=3, # arrow type - 1: up, 2: down and 3: both
                  lwd=lwd_current, # line width
                  col=listColors[intPermVal], # line color
                  ljoin=1, # line join style - 0: round, 1: mitre and 2: bevel
                  lmitre=1, # line mitre limit, range 1-10
                  lend=2 # line end style - 0: round, 1: butt and 2: square
              ) );
            }
          }
        }
      }
    }
  }
}




# add the legend
legend(
  x="bottom",                  # x coordinate of legend
  listLegendDisp,              # vector of legend labels
  col=listColorsDisp,          # vector of point and line colors
  lty=listLtyDisp,            # vector of line types
  lwd=listLwdLeg,              # vector of line widths
  pch=listPchDisp,            # vector of point symbols
  merge=FALSE,                # merge points and lines
  cex=#<legend_size>#,			  # relative magnification
  bty="#<legend_box>#",        # legend box type - o: box, n: none
  adj=0,                      # string adjustment for text
  xpd=TRUE,                    # clipping - FALSE: plot region, TRUE: figure region, NA: device region
  ncol=#<legend_ncol>#,			  # number of columns in legend
  inset=#<legend_inset>#,			# inset distance from margin
  x.intersp=1,                # horizontal character spacing factor
  y.intersp=.8                # vertical character spacing factor
);


# plot caption
mtext(
  "#<plot_caption>#",          # caption
  font=#<caption_weight>#,		# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  col="#<caption_col>#",      # font color
  las=0,                      # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=1,                      # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<caption_size>#,			  # relative magnification
  padj=#<caption_offset>#,		# axis perpendicular location adjustment
  adj=#<caption_align>#,			# axis parallel location adjustment
  line=1                      # margin line, starting at 0 counting outwards
);

invisible(dev.off());