setwd("#<r_work>#")

source("include/util_plot.R")

#
#  Plot Control Variables
#

boolGridOn		= #<grid_on>#
		
listY1limUsr	= #<y1_lim>#
		
dfPlot = read.delim("#<data_file>#")

strIndyVar = "#<indy_var>#"

listDep1Plot = #<dep1_plot>#
		
listAggVal = #<agg_list>#
		
listSeries1Val = #<series1_list>#

listSeriesNobs = #<series_nobs>#
		
listDep1Scale = #<dep1_scale>#

listIndy = #<indy_list>#

listColors = #<colors>#

listSeriesVar = names(listSeries1Val)
matPermVal = permute(listSeries1Val)

# calculate the horizonal location increment
dblBuf = .3
intNumPerm = nrow(matPermVal)
dblInc = (1 - dblBuf) / intNumPerm
listX = 1:length(listIndy)

# specify the output file
strPlotType = "#<plot_type>#"
if( "jpeg" == strPlotType ){
	jpeg(
		"#<plot_file>#",		# output file name, with appropriate extension 
		width=#<plot_width>#,	# width of the display region, in specified units
		height=#<plot_height>#,	# height of the display region, in specified units
		res=#<plot_res>#,		# resolution, in dots per inch
		units="#<plot_units>#",	# units for height and width
		pointsize = 12,
		quality = 100,
		#bg = "white",
		#type = c("cairo", "Xlib", "quartz"),
		#antialias
	)
} else {
	bitmap(
		"#<plot_file>#",		# output file name, with appropriate extension 
		type="#<plot_type>#",	# type of bitmap
		width=#<plot_width>#,	# width of the display region, in specified units
		height=#<plot_height>#,	# height of the display region, in specified units
		res=#<plot_res>#,		# resolution, in dots per inch
		units="#<plot_units>#",	# units for height and width
		taa=4,					# bits of anti-aliasing for graphics
		gaa=4					# bits of anti-aliasing for text
	)
}

# specify plot window formatting
par( 
	mar=#<mar>#,			# lines of margin in form c(bottom, left, top, right)
	mgp=#<mgp>#,			# margin line for axis title, axis labels and axis line in form c(title, labels, line)
	cex=#<cex>#,			# magnification for plot text
	las=0 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
)

# build a box series for each plot series permutation
boolAdd = FALSE
for(intPermVal in 1:nrow(matPermVal)){
	
	listBox = list()
	listAt = listX - .5 + (dblBuf/2) + (intPermVal - 1) * dblInc
	
	
	# construct the data frame for the current series
	listPermVal = matPermVal[intPermVal,]			
	for(intVar in 1:length(listSeriesVar)){
		for(strIndy in listIndy){
			listBox[[ strIndy ]] = dfPlot[ dfPlot[[ listSeriesVar[intVar] ]] == listPermVal[intVar] &
										   dfPlot[[ strIndyVar ]] == strIndy, ]$stat_value
		}
	}
	
	if( boolAdd != TRUE )	strYaxt="s"
	else					strYaxt="n"
	
	boxplot(
		listBox,				# box data as a list of vectors 
		at=listAt,				# vector of box positions
		notch=#<box_notch>#,	# draw box notces - TRUE: notches on, FALSE: notches off
		boxwex=#<box_boxwex>#,	# scale factor to apply to all box widths
		col=listColors[intPermVal], # box color(s)
		xaxt="n",				# x-axis type - n: no axis, s: compatibility with l and t
		ylim=listY1limUsr,		# y1-axis limits
		yaxt=strYaxt,			# y1-axis type - n: no axis, s: compatibility with l and t
		add=boolAdd,			# add boxes to current plot - TRUE: add, FALSE: new plot
		tck=.01 				# length of tick marks as a fraction of plot window		
	)
	
	boolAdd = TRUE
}

# add grid lines to the plot, if requested
if( TRUE == boolGridOn ){
	grid(
		lty=#<grid_lty>#,		# line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
		col="#<grid_col>#",		# line color
		lwd=#<grid_lwd>#,		# line width
		nx=0,					# number of cells in x direction, NULL for default
		ny=NULL					# number of cells in y direction, NULL for default
	)
}

# plot title
mtext(
	"#<plot_title>#",		# label
	font=#<title_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=3,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<title_size>#,		# relative magnification
	padj=#<title_offset>#,	# axis label perpendicular location adjustment
	adj=#<title_align>#,	# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
)

# specify the x-axis
axis(
	1,						# axis of interest, 1: below, 2: left, 3: above and 4: right 
	at=listX,				# locations of tick marks
	labels=#<indy_label>#,	# axis labels
	tick=TRUE,				# tick marks on/off
	tck=.01, 				# length of tick marks as a fraction of plot window
	las=#<xtlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	padj=#<xtlab_perp>#,	# axis label perpendicular location adjustment 
	hadj=#<xtlab_horiz>#,	# axis label parallel location adjustment 
	cex.axis=1,				# relative axis label magnification 
	col="gray"				# axis color
)

# x-axis label
mtext(
	"#<x_label>#",			# label
	font=#<xlab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=1,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<xlab_size>#,		# relative axis label magnification
	padj=#<xlab_offset>#,	# axis label perpendicular location adjustment
	adj=#<xlab_align>#,		# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
)

# y-axis label
mtext(
	"#<y1_label>#",			# label
	font=#<ylab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
	las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
	side=2,					# axis of interest, 1: below, 2: left, 3: above and 4: right
	cex=#<ylab_size>#,		# relative axis label magnification
	padj=#<ylab_offset>#,	# axis label perpendicular location adjustment
	adj=#<ylab_align>#,		# axis label parallel location adjustment
	line=1					# margin line, starting at 0 counting outwards
)

# add the number of stats at each independent axis tick, if requested
if( 0 < length(listSeriesNobs) ){
	
	# build a data frame of nobs series data
	dfNobs = dfPlot
	for(strSeriesNobsVar in names(listSeriesNobs)){
		strSeriesNobsVal = listSeriesNobs[[strSeriesNobsVar]] 
		dfNobs = dfNobs[dfNobs[[strSeriesNobsVar]] == strSeriesNobsVal,]
	}
	
	# build the list of nobs, one for each independent variable value
	listNobs = c()
	for(strIndyVal in listIndy){
		dblTotalSum = sum(dfNobs[dfNobs[[strIndyVar]] == strIndyVal,]$total)
		dblNobsSum = sum(dfNobs[dfNobs[[strIndyVar]] == strIndyVal,]$nobs)
		listNobs = append(listNobs, dblNobsSum / dblTotalSum);
	}
	listNobsLabels = formatC(listNobs, format="f", digits=4);
	
	axis(
		3,						# axis of interest, 1: below, 2: left, 3: above and 4: right
		at=listX,				# locations of tick marks
		labels=listNobsLabels,	# axis labels
		tick=TRUE,				# tick marks on/off
		tck=.01, 				# length of tick marks as a fraction of plot window
		las=#<x2tlab_orient>#,	# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
		padj=#<x2tlab_perp>#,	# axis label perpendicular location adjustment
		hadj=#<x2tlab_horiz>#,	# axis label parallel location adjustment
		cex.axis=.8,			# relative axis label magnification
		col="black"				# axis color
	)
	
	mtext(
		"Observation Rate",		# label
		las=0, 					# axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
		side=3,					# axis of interest, 1: below, 2: left, 3: above and 4: right
		font=#<x2lab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
		cex=#<x2lab_size>#,		# relative axis label magnification
		padj=#<x2lab_offset>#,	# axis label perpendicular location adjustment
		adj=#<x2lab_align>#,	# axis label parallel location adjustment
		line=1					# margin line, starting at 0 counting outwards
	)	
}

listLegend = paste(matPermVal, listDep1Plot[[ names(listDep1Plot) ]])

legend(
	x="bottom",				# x coordinate of legend
	listLegend,				# vector of legend labels
	col=listColors,			# vector of point and line colors 
	lty=1,					# vector of line types
	lwd=5,					# line width
	cex=#<legend_size>#,	# relative magnification
	bty="#<legend_box>#",	# legend box type - o: box, n: none
	#bg="#EEEEEEFF",		# background color
	#box.lty=,				# legend box line type
	#box.lwd=,				# legend box line width	
	#horiz=FALSE,			# horizontal configuration
	adj=.08,				# string adjustment for text
	xpd=TRUE,				# clipping - FALSE: plot region, TRUE: figure region, NA: device region 
	ncol=3,					# number of columns in legend
	#agginset=c(0, -.25),	# inset distance from margin
	inset=#<legend_inset>#,	# inset distance from margin
	x.intersp=1,			# horizontal character spacing factor
	y.intersp=.8			# vertical character spacing factor
)

dev.off()

