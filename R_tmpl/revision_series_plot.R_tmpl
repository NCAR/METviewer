setwd("#<r_work>#");

source("include/util_plot.R");



strDataFile = "#<data_file>#";
strPlotFile = "#<plot_file>#";

#
#  Plot Control Variables
#
boolEqualizeByIndep = #<equalize_by_indep>#;
boolEventEqual  = #<event_equal>#;
boolShowNStats  = #<show_nstats>#;
boolIndy1Stagger= #<indy1_stagger>#;
boolGridOn    = #<grid_on>#;
boolDumpPoints1  = #<dump_points1>#;

listY1limUsr  = #<y1_lim>#;

listPlotDisp  = #<plot_disp>#;

listPlotOrderSeries  = #<order_series>#;

strIndyVar    = "#<indy_var>#";

listIndy = #<indy_list>#;

listIndyPlotVal = #<indy_plot_val>#;

listDep1Plot = #<dep1_plot>#;

listAggVal = #<agg_list>#;

listSeries1Val = #<series1_list>#;

listFixedValEx = #<fix_val_list_eq>#;

listDep1Scale = #<dep1_scale>#;

listLegendUsr = #<legend>#;

listColors = #<colors>#;
listPch = #<pch>#;
listType = #<type>#;
listLty = #<lty>#;
listLwd = #<lwd>#;
listConSeries = #<con_series>#;

revisionAc = #<revision_ac>#;
revisionRun = #<revision_run>#;

#
#  Build the series data for the plot
#

#if fcst_var is a special char - read it as-is and do not convert
sampleData = read.delim(strDataFile,nrows=5);
classes <- sapply(sampleData, class);
numeric_columns <- c('stat_value', 'stat_bcl', 'stat_bcu', 'stat_ncu', 'stat_ncl','fbs', 'fss');
integer_columns <- c('fcst_lead','nstats');
character_columns <- c('fcst_var', 'model', 'stat_name', 'object_id', 'cluster_id', 'object_cat');
for(col in 1:ncol(sampleData)){
  if ( is.element( names(classes)[col] , numeric_columns) ){
    classes[col]='numeric';
  } else if ( is.element( names(classes)[col] , integer_columns) ){
    classes[col]='integer';
  } else if ( is.element( names(classes)[col] , character_columns) ){
    classes[col]='character';
  }
}

dfPlot = read.delim(strDataFile,colClasses = classes);
if(nrow(dfPlot) > 0){

# run event equalizer, if requested
if( FALSE != boolEventEqual  ){

  library(reticulate)

  #use_python("/Volumes/d1/tatiana/miniconda3/envs/METviewer/bin/python", required = TRUE)
  #use_virtualenv("/Volumes/d1/tatiana/miniconda3/envs/METviewer")
  #source_python('/Users/tatiana/PycharmProjects/METviewer/event_equalize.py')

  use_virtualenv("/d3/projects/METViewer/METviewer_py3.6.3")
  source_python('/d3/projects/METViewer/METcalcpy/metcalcpy/event_equalize.py')


  sys = import('sys')
  dfPlot1 = data.frame();
  #list all fixed variables
  listFixVars=c();
  listFixVarVals = c();
  if(length(listFixedValEx) > 0){
    for(index in 1:length(listFixedValEx)){
      if(is.null(listFixVars)){
        listFixVars = names(listFixedValEx[index]);
        listFixVarVals = permute(listFixedValEx[index]);
      }else{
        listFixVars =  append(listFixVars, names(listFixedValEx[index]));
        listFixVarVals = append(listFixVarVals, permute(listFixedValEx[index]));
      }
    }
  }


  for( strDep1Name in names(listDep1Plot) ){
    for( strDep1Stat in listDep1Plot[[strDep1Name]] ){
      fPlot = dfPlot;
      for(strSeriesVal in names(listSeries1Val)){
        vectValPerms = c();
        for(index in 1:length(listSeries1Val[[strSeriesVal]])){
          vectValPerms= append(vectValPerms, strsplit(listSeries1Val[[strSeriesVal]][index], ",")[[1]]);
        }
        fPlot = fPlot[fPlot$fcst_var == strDep1Name & fPlot[[strSeriesVal]] %in% vectValPerms & fPlot$stat_name %in% strDep1Stat,  ];
      }
      #fPlot = eventEqualize(fPlot, strIndyVar, listIndy, listSeries1Val, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
      fPlot = event_equalize(fPlot, strIndyVar, listIndy, listSeries1Val, listFixVars,listFixVarVals, boolEqualizeByIndep, FALSE);
      sys$stdout$flush()
      dfPlot1 = rbind(dfPlot1, fPlot);
    }

  }

  strAfrerEqualizeFile = sub("\\.data$", ".dataAfterEq", strDataFile, perl=TRUE);
  write.table(dfPlot, file=strAfrerEqualizeFile, quote=FALSE, row.names=FALSE, col.names=TRUE, sep = "\t");

}



# order the series formatting

listColorsOrdered=c();
listLtyOrdered=c();
listLwdOrdered=c();
listPchOrdered=c();
listPlotDispOrdered=c();
listTypeOrdered=c();
for(index in 1:length(listPlotOrderSeries)){
  listLwdOrdered[ listPlotOrderSeries[index] ] = listLwd[index];
  listColorsOrdered[ listPlotOrderSeries[index] ]=listColors[index];
  listLtyOrdered[ listPlotOrderSeries[index] ]=listLty[index];
  listPchOrdered[ listPlotOrderSeries[index] ]=listPch[index];
  listPlotDispOrdered[ listPlotOrderSeries[index] ]=listPlotDisp[index];
  listTypeOrdered[ listPlotOrderSeries[index] ]=listType[index];
}

# calculate the number of Y1 series per dep stat
intNumSeries1 = numSeries(listSeries1Val, listDep1Plot);
intNumSeries1Dep = nrow( permute(listSeries1Val) );




# separate formatting for Y1
indexesNumSeries1 = 1:intNumSeries1;
listPlotDispSeries1 = listPlotDisp[indexesNumSeries1];
listPchSeries1 = listPch[indexesNumSeries1];
listTypeSeries1 = listType[indexesNumSeries1];
listLtySeries1 = listLty[indexesNumSeries1];
listLwdSeries1 = listLwd[indexesNumSeries1];
listColorsSeries1 = listColors[indexesNumSeries1];
listConSeries1 = listConSeries[indexesNumSeries1];
listPlotOrderSeries1Orig = listPlotOrderSeries[indexesNumSeries1];



listPlotOrderSeries1Part=c();
maxx = max(listPlotOrderSeries1Orig)+1;
for(index in 1:length(listPlotOrderSeries1Orig)){
  indOfMin=which.min(listPlotOrderSeries1Orig);
  listPlotOrderSeries1Part[[indOfMin]] = index;
  listPlotOrderSeries1Orig[[indOfMin]] = maxx;
}


# build the y1 plot series using information in the plot dataframe
listSeries1 = list();
listLegend = c();
listLegendNotOrdered = c();
listAllStats=list();
intLegendIndex=1;
for( strDep1Name in names(listDep1Plot) ){
  for( strDep1Stat in listDep1Plot[[strDep1Name]] ){

    # gather the stats that pertain to the current fcst_var and stat
    dfPlotStat = dfPlot[dfPlot$fcst_var == strDep1Name & dfPlot$stat_name == strDep1Stat,];
    dfPlotStat = scaleStats(dfPlotStat, listDep1Scale, paste(strDep1Name, "_", strDep1Stat, sep=""));

    # build the y1 plot series using information in the plot dataframe
    listAllStats1 = buildAllStats(dfPlotStat, listSeries1Val,strDep1Stat,strDep1Name);
    listAllStats = append(listAllStats, listAllStats1);
  }
}


lables_for_x=c()
lables_for_x_series = list();
revisionRunList = list();
revisionAcList = list();

for( ind in 1: length(listAllStats) ){
  result = NULL
  lables_for_x=c()
  listAllStatsName = names(listAllStats)[ind];
  # sort data by fcst_valbid_beg assending and fcst_lead descending
  sorted_series_data = listAllStats[[listAllStatsName]] [with( listAllStats[[listAllStatsName]] , order(fcst_valid_beg, -fcst_lead)),];

  #get unique fcst_valid_beg
  unique_fcst_valid_beg = unique(sorted_series_data$fcst_valid_beg);

  #for each fcst_valid_beg calculate the difrensies

  for(valid in unique_fcst_valid_beg){
    data_for_valid = sorted_series_data[ sorted_series_data$fcst_valid_beg == valid,];

    #make sure that the data is valid
    # each valide date/time should have a unique list of lead times
    # if the list is not unique - throw an error
    if ( anyDuplicated(data_for_valid$fcst_lead) != 0){
      stop(paste("Valid date",valid,"for",listAllStatsName,"doesn't have unique lead times.", sep = " "));
    }
    for ( i in 1: nrow(data_for_valid)){
      if(i < nrow(data_for_valid)){
        data_for_valid[i,]$stat_value = data_for_valid[i+1,]$stat_value - data_for_valid[i,]$stat_value;
        data_for_valid[i,]$fcst_lead =NA;
      }else{
        data_for_valid[i,]$stat_value = NA;
        data_for_valid[i,]$fcst_lead = format(as.POSIXct(data_for_valid[i,]$fcst_valid_beg, format="%Y-%m-%d %H:%M:%S", tz="GMT"), format="%m-%d %H", tz="GMT")

      }
    }
    lables_for_x = c(lables_for_x, data_for_valid$fcst_lead);
    if(is.null(result)){
      result = data_for_valid;
    }else{
      result = merge(result,data_for_valid, all=TRUE, sort=FALSE);
    }
  }


  if(revisionRun){
    revisionRunList[[ind]] = runs.test(result$stat_value,alternative='left.sided')$p.value;
  }
  if(revisionAc){
    acf_value=acf(result$stat_value,type='correlation',na.action = na.pass, plot=FALSE);
    r= acf_value$acf[2];
    p = qnorm((1 + 0.05)/2)/sqrt(acf_value$n.used)
    revisionAcList[[ind]] = c(r,p);
  }

  listSeries1[[ind]] = result$stat_value;
  lables_for_x_series[[ind]] = lables_for_x;
  # if( TRUE == exists("listNStats") ){
  #   if("nstats" %in% names(listAllStats[[listAllStatsName]])){
  #     listNStats = listNStats + listAllStats[[listAllStatsName]]$nstats;
  #   }else{
  #     listNStats = listNStats + listPlotData1$nstats;
  #   }
  # }else {
  #   if("nstats" %in% names(listAllStats[[listAllStatsName]])){
  #     listNStats = listAllStats[[listAllStatsName]]$nstats;
  #   }else{
  #     listNStats = listPlotData1$nstats;
  #   }
  # }
  listLegendNotOrdered[intLegendIndex] = listAllStatsName;
  intLegendIndex = intLegendIndex + 1;
}

if( length(lables_for_x_series)> 0 ){
  lables_for_x = lables_for_x_series[[1]]
}



# sort and dump the y1 axis series data points into a file suffixed .points1
if( TRUE == boolDumpPoints1 ){
  listSeriesOrdered=list();
  oldInd=1;
  for(index in 1:length(listPlotOrderSeries1Part)){
    newInd = (3 * listPlotOrderSeries1Part[index]) -2;
    for(i in 0:2){
      listSeriesOrdered[newInd+i]=listSeries1[oldInd+i];
    }
    oldInd = oldInd +3;
  }

  strPointsFile = sub("\\.data$", ".points1", strDataFile, perl=TRUE);
  write.table(listSeriesOrdered, file=strPointsFile, quote=FALSE, row.names=FALSE, col.names=FALSE);
}




#replace with user's legends
if( 0 < length(listLegendUsr) ){
  for(index in 1:length(listLegendUsr)){
    if(nchar(listLegendUsr[index]) > 0){
      listLegendNotOrdered[index]=listLegendUsr[index];
    }
  }
}

#add p-values
if(revisionRun || revisionAc) {
  for (index in 1:length(listLegendNotOrdered)) {
    if (revisionRun) {
      p_value = revisionRunList[[index]];
      if (is.nan(p_value)) {
        p_value = 'N/A';
      } else{
        p_value = round(p_value, 2);
      }
      p_value = paste("(WW Runs Test:", p_value, ")", sep = " ");
      listLegendNotOrdered[index] = paste(listLegendNotOrdered[index], p_value, " ");
    }
    if (revisionAc) {
      p_value = revisionAcList[[index]][2];
      if (is.nan(p_value)) {
        p_value = 'N/A';
      } else{
        p_value = round(p_value, 2);
      }
      r=revisionAcList[[index]][1];
      if (is.nan(r)) {
        r = 'N/A';
      } else{
        r = round(r, 2);
      }
      text = paste("(Auto-Corr Test: p=", p_value, ",r=", r,")", sep = " ");
    listLegendNotOrdered[index] = paste(listLegendNotOrdered[index], text, " ");
    }

  }
}


#order legends
for(index in 1:length(listPlotOrderSeries)){
  listLegend[ listPlotOrderSeries[index] ]=listLegendNotOrdered[index];
}

# specify the output file
strPlotType = "#<plot_type>#";
if( "jpeg" == strPlotType ){
  jpeg(
  strPlotFile,            # output file name, with appropriate extension
  width=#<plot_width>#,	  # width of the display region, in specified units
  height=#<plot_height>#,	# height of the display region, in specified units
  res=#<plot_res>#,		    # resolution, in dots per inch
  units="#<plot_units>#",  # units for height and width
  pointsize = 12,
  quality = 100
  );
} else {
  bitmap(
  strPlotFile,            # output file name, with appropriate extension
  type="#<plot_type>#",    # type of bitmap
  width=#<plot_width>#,	  # width of the display region, in specified units
  height=#<plot_height>#,	# height of the display region, in specified units
  res=#<plot_res>#,		    # resolution, in dots per inch
  units="#<plot_units>#",  # units for height and width
  taa=4,                  # bits of anti-aliasing for graphics
  gaa=4                    # bits of anti-aliasing for text
  );
}

# specify the y-axis limits and labels
listY1Bounds = list(min=min(unlist(listSeries1),na.rm=TRUE), max=max(unlist(listSeries1),na.rm=TRUE));


if( 0 < length(listY1limUsr) ){
  dblY1Min = listY1limUsr[1];
  dblY1Max = listY1limUsr[2];
} else {
  dblY1Min = listY1Bounds$min;
  dblY1Max = listY1Bounds$max;
}

if(is.infinite(dblY1Min)){
  dblY1Min = 0
}
if(is.infinite(dblY1Max)){
  dblY1Max = 0
}
listY1axp = c(dblY1Min, dblY1Max, 5);

listY1lim = c(dblY1Min, dblY1Max);

# specify plot window formatting
par(
mar=#<mar>#,			# lines of margin in form c(bottom, left, top, right)
mgp=#<mgp>#,			# margin line for axis title, axis labels and axis line in form c(title, labels, line)
cex=#<cex>#,			# magnification for plot text
las=2          # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
);



# build the list of independent values
listX = 1: length(sorted_series_data$fcst_lead);

listXlim = c(min(listX), max(listX));




listXSeries = listX;
listY1Series = listSeries1[[1]];
intXAxis = 1;
intY1Axis = 2;
intX2Axis = 3;
intY2Axis = 4;
intGridNx = 0;
intGridNy = NULL;



# specify the plot formatting
plot(
listXSeries,        # series x data
listY1Series,        # series y1 data
type="n",            # series line type - p: points, l: lines, o: overplotted points and lines,
#   b or c: points joined by lines, s or S: stair steps, h: histogram, n: nothing
xaxt="n",            # x-axis type - n: no axis, s: compatibility with l and t
xaxs="r",            # x-axis style - r: regular, i: internal
yaxt="n",            # y1-axis type - n: no axis, s: compatibility with l and t
yaxs="r",            # x-axis style - r: regular, i: internal
xlim=listXlim,      # x-axis limits in form c(x1,x2); x1 > x2 reverses axis
ylim=listY1lim,      # y1-axis limits
xlab="",            # x-axis label
ylab="",            # y1-axis label
lwd=1,              # line width
cex.lab=1,          # relative axis label magnification
cex.main=1,          # relative title magnification
cex.sub=1,          # relative subtitle magnification
fg="gray"
);

# set the plot window limits

dblY1BufrPct = #<y1_bufr>#;

if( dblY1Max == dblY1Min){
  dblY1Max = dblY1Max +1;
  dblY1Min = dblY1Min -1;
}

dblY1Bufr = (dblY1Max - dblY1Min) * dblY1BufrPct;
par(usr=c(par()$usr[1:2], dblY1Min - dblY1Bufr, dblY1Max + dblY1Bufr));



# plot title
mtext(
  "#<plot_title>#",        # label
  font=#<title_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0,                  # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=3,                  # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<title_size>#,		  # relative magnification
  padj=#<title_offset>#,	# axis label perpendicular location adjustment
  adj=#<title_align>#,	  # axis label parallel location adjustment
  line=1                  # margin line, starting at 0 counting outwards
);

# specify the x-axis
axis(
  intXAxis,                  # axis of interest, 1: below, 2: left, 3: above and 4: right
  at=replace(listX, which(is.na(lables_for_x)), NA),                  # locations of tick marks
  labels=lables_for_x,    # axis labels
  tick=TRUE,                # tick marks on/off
  tck=.02,                  # length of tick marks as a fraction of plot window
  las=2,      # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  padj=0.7,      # axis label perpendicular location adjustment
  hadj=.8,      # axis label parallel location adjustment
  cex.axis=1,  # relative axis label magnification
  col="gray"                # axis color
);


# x-axis label
mtext(
  "#<x_label>#",        # label
  font=#<xlab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0,                # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=intXAxis,        # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<xlab_size>#,		# relative axis label magnification
  padj=#<xlab_offset>#,	# axis label perpendicular location adjustment
  adj=#<xlab_align>#,		# axis label parallel location adjustment
  line=1                # margin line, starting at 0 counting outwards
);

# specify the y-axis
axis(
  intY1Axis,                # axis of interest, 1: below, 2: left, 3: above and 4: right
  #at=NA,					          # locations of tick marks
  labels=TRUE,              # tick labels on/off
  tick=TRUE,                # tick marks on/off
  tck=.01,                  # length of tick marks as a fraction of plot window
  las=#<ytlab_orient>#,	    # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  padj=#<ytlab_perp>#,	    # axis label perpendicular location adjustment
  hadj=#<ytlab_horiz>#,	    # axis label parallel location adjustment
  cex.axis=#<ytlab_size>#,  # relative axis label magnification
  col="gray"                # axis color
);

# y-axis label
mtext(
  "#<y1_label>#",        # label
  font=#<ylab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  las=0,                # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=intY1Axis,        # axis of interest, 1: below, 2: left, 3: above and 4: right
  cex=#<ylab_size>#,		# relative axis label magnification
  padj=#<ylab_offset>#,	# axis label perpendicular location adjustment
  adj=#<ylab_align>#,		# axis label parallel location adjustment
  line=1                # margin line, starting at 0 counting outwards
);

# add grid lines to the plot, if requested
if( TRUE == boolGridOn ){
  grid(
  lty=#<grid_lty>#,		  # line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
  col="#<grid_col>#",    # line color
  lwd=#<grid_lwd>#,		  # line width
  nx=intGridNx,          # number of cells in x direction, NULL for default
  ny=intGridNy          # number of cells in y direction, NULL for default
  );

  # calculate the grid line locations
  listXGrid = listX;
  intXtlabDecim = #<xtlab_decim>#;
  if( 0 < intXtlabDecim ){
    listXGrid = listXGrid[seq(from=1, to=length(listX), by=intXtlabDecim)];
  }


  abline(
  v=listXGrid,            # list of positions for the gridlines
  lty=#<grid_lty>#,		    # line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
  col="#<grid_col>#",      # line color
  lwd=#<grid_lwd>#, 	    # line width
  cex=1                    # line magnification
  );

}

# add the number of stats at each independent axis tick, if requested
if( TRUE == boolShowNStats ){
  axis(
  intX2Axis,                # axis of interest, 1: below, 2: left, 3: above and 4: right
  at=listX,                  # locations of tick marks
  labels=listNStats,        # axis labels
  tick=TRUE,                # tick marks on/off
  tck=.01,                  # length of tick marks as a fraction of plot window
  las=#<x2tlab_orient>#,	  # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  padj=#<x2tlab_perp>#,	    # axis label perpendicular location adjustment
  hadj=#<x2tlab_horiz>#,	  # axis label parallel location adjustment
  cex.axis=#<x2tlab_size>#, # relative axis label magnification
  col="gray"                # axis color
  );

  mtext(
  "NStats",                # label
  las=0,                  # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
  side=intX2Axis,          # axis of interest, 1: below, 2: left, 3: above and 4: right
  font=#<x2lab_weight>#,	# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  cex=#<x2lab_size>#,		  # relative axis label magnification
  padj=#<x2lab_offset>#,	# axis label perpendicular location adjustment
  adj=#<x2lab_align>#,	  # axis label parallel location adjustment
  line=1                  # margin line, starting at 0 counting outwards
  );
}




# build the x-adjustment increments, if requested
dblAdjScale = (listX[length(listX)] - listX[1]) / 150;



# plot the y2-axis series first, so that they lie underneath the y1-axis series
listY1Usr = par()$usr;
par(ylog=FALSE);



# restore the plot window limits for y1

par(new=TRUE, ylog=FALSE, usr=listY1Usr, xaxs="r");


# build the x-adjustment increments, if requested
intNumStag1 = intNumSeries1;

listX1Stag = rep(0, intNumStag1 + 1);
if( TRUE == boolIndy1Stagger ){
  listX1Stag = seq( -(intNumStag1/2)*dblAdjScale, (intNumStag1/2)*dblAdjScale, length=intNumStag1 + 1 ) + ( dblAdjScale/2 );
}

# plot the y1-axis series
for(i in 1:(intNumSeries1)){

  # if the current series is not displayed, continue to the next
  if( !listPlotDispSeries1[i] ){
    next;
  }

  intStagIndex = listPlotOrderSeries1Part[i];

  # slice the series constituents from the series list
  listData  = listSeries1[[i]];
  listXAdj  = listX + listX1Stag[intStagIndex];


  # plot the series line
  lines(
  listXAdj,                      # x coordinates
  listData,                      # y coordinates
  type=listTypeSeries1[i],      # series line type - p: points, l: lines, o: overplotted points and lines,
  #   b or c: points joined by lines, s or S: stair steps, h: histogram, n: nothing
  pch=listPchSeries1[i],        # point symbol - see example(points)
  font=5,                        # 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
  lty=listLtySeries1[i],        # line type - 0: blank, 1: solid, 2: dashed, 3: dotted, 4: dotdash, 5: longdash, 6: twodash
  col=listColorsSeries1[i],      # line color
  cex=1,                        # line magnification
  lwd=listLwdSeries1[i]          # line width
  );


} # end: for(i in 1:intNumSeries1)

listLwdLeg = listLwdOrdered;
listLwdLeg[listLwdLeg > 3] = 3;

# mask the hidden elements from the legend and color list
listLegendDisp = listLegend[listPlotDispOrdered];
listColorsDisp = listColorsOrdered[listPlotDispOrdered];
listLtyDisp    = listLtyOrdered[listPlotDispOrdered];
listPchDisp    = listPchOrdered[listPlotDispOrdered];
listTypeDisp = listTypeOrdered[listPlotDispOrdered];


#display only a symbol for line type 'p'
for(indType in 1:length(listTypeDisp) ){
  if (listTypeDisp[indType] == 'p'){
    listLtyDisp[indType] = NaN;
    listLtyDisp[indType] = NaN;
  }
}

# add the legend
legend(
x="bottom",                  # x coordinate of legend
listLegendDisp,              # vector of legend labels
col=listColorsDisp,          # vector of point and line colors
lty=listLtyDisp,            # vector of line types
lwd=listLwdLeg,              # vector of line widths
pch=listPchDisp,            # vector of point symbols
merge=FALSE,                # merge points and lines
cex=#<legend_size>#,			  # relative magnification
bty="#<legend_box>#",       # legend box type - o: box, n: none
#bg="#EEEEEEFF",				    # background color
#box.lty=,						      # legend box line type
#box.lwd=,						      # legend box line width
#horiz=FALSE,					      # horizontal configuration
adj=0,                      # string adjustment for text
xpd=TRUE,                    # clipping - FALSE: plot region, TRUE: figure region, NA: device region
ncol=#<legend_ncol>#,			  # number of columns in legend
#agginset=c(0, -.25),			  # inset distance from margin
inset=#<legend_inset>#,			# inset distance from margin
x.intersp=1,                # horizontal character spacing factor
y.intersp=.8                # vertical character spacing factor
);

# plot caption
mtext(
"#<plot_caption>#",          # caption
font=#<caption_weight>#,		# 1: plain text, 2: bold, 3: italic, 4: bold italic and 5: symbol
col="#<caption_col>#",      # font color
las=0,                      # axis label orientation - 0: parallel to axis, 1: horiz, 2: perp to axis, 3: vert
side=1,                      # axis of interest, 1: below, 2: left, 3: above and 4: right
cex=#<caption_size>#,				  # relative magnification
padj=#<caption_offset>#,		# axis perpendicular location adjustment
adj=#<caption_align>#,			# axis parallel location adjustment
line=1                      # margin line, starting at 0 counting outwards
);

#<plot_cmd>#


invisible(dev.off());
}
